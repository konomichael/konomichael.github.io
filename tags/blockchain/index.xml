<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>blockchain on Michael's space</title><link>https://www.michaelchan.space/tags/blockchain/</link><description>Recent content in blockchain on Michael's space</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2023 author Michael Chan</copyright><lastBuildDate>Fri, 25 Nov 2022 19:09:20 +0800</lastBuildDate><atom:link href="https://www.michaelchan.space/tags/blockchain/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the Endorser process proposal</title><link>https://www.michaelchan.space/posts/understanding-the-endorser-process-proposal/</link><pubDate>Fri, 25 Nov 2022 19:09:20 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-endorser-process-proposal/</guid><description>&lt;p>In the previous posts, we learned how the peer and chaincode start and knew there&amp;rsquo;re multiple roles in a hyperledger fabric network. In this post, we will have new insights into the endorser. But before we do that, let&amp;rsquo;s have a global view of how the fabric run.&lt;/p></description><content>&lt;p>In the previous posts, we learned how the peer and chaincode start and knew there&amp;rsquo;re multiple roles in a hyperledger fabric network. In this post, we will have new insights into the endorser. But before we do that, let&amp;rsquo;s have a global view of how the fabric run.&lt;/p>
&lt;h2 id="the-proposal-the-endorser-and-the-order">The proposal, the endorser, and the order&lt;/h2>
&lt;p>A proposal in Hyperledger Fabric is a transaction request sent to the network for processing. It contains all the necessary information related to the transaction, including the sender&amp;rsquo;s identity, the receiver&amp;rsquo;s identity, the amount of the transaction, and any other relevant data. When a proposal is submitted, it is first verified by the endorsing peers to ensure that it is valid and meets the required criteria. Once the proposal is validated, it is sent to the ordering service for further processing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Proposal&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Header&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=header,proto3&amp;#34; json:&amp;#34;header,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Payload&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=payload,proto3&amp;#34; json:&amp;#34;payload,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Extension&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,3,opt,name=extension,proto3&amp;#34; json:&amp;#34;extension,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The endorser in Hyperledger Fabric is responsible for endorsing the validity of a transaction proposal. Endorsers are selected by the client based on the network&amp;rsquo;s endorsement policy, which specifies the required number of endorsements required to execute a transaction. Endorsers examine the proposal and determine whether it meets the requirements specified by the endorsement policy. If the proposal meets the endorsement policy criteria, the endorser digitally signs the proposal and sends it back to the client for further processing.&lt;/p>
&lt;p>The order in Hyperledger Fabric is responsible for processing and validating endorsed transactions. The ordering service is a separate component in the network that ensures that all transactions are executed in a consistent and sequential order. The order service takes endorsed transactions from the client and creates a block containing the transactions in the correct order. Once the block is created, it is broadcasted to all the nodes in the network for validation and verification. Once the block is validated, it is added to the blockchain, and the transaction is considered complete.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> Execution Phase │ Ordering Phase │ Validation Phase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌─────────────┐ │ │ ┌─────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Peer 1 │ 1 │ │ │ Peer 1 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ (Endorser) ◄────────────┐ │ │ ┌────► (Endorser) │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─┬───────────┘ │ │ │ │ │ 6, 7, 8 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ 2 ┌───┴───┐ │ ┌───────────┐ │ │ └─────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └────────────────────► │ 3 │ │ Ordering │ 5 │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ client├───┼──►│ ├───┼─┤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌────────────────────► │ │ │ Service │ │ │ ┌─────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ 2 └───┬───┘ │ └───────────┘ │ │ │ Peer 2 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌─┴───────────┐ │ │ 4 │ ├────► (Endorser) │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Peer 2 ◄────────────┘ │ │ │ │ 6, 7, 8 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ (Endorser) │ 1 │ │ │ └─────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─────────────┘ │ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ │ │ ┌─────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌─────────────┐ │ │ │ │ Peer 3 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ Peer 3 │ │ │ └────► │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│ (Endorser) │ │ │ │ 6, 7, 8 │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└─────────────┘ │ │ └─────────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1: Send transaction for endorsement
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2: Transaction with endorser signature and read/write set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3: Transaction with endorser response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 4: Transactions packed in blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 5: Block of transactions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6: VSCC &amp;amp; MVCC validation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 7: World state updated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 8: Block appended to ledger
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-channel">The Channel&lt;/h2>
&lt;p>A Hyperledger Fabric &lt;code>channel&lt;/code> is a private “subnet” of communication between two or more specific network members, for the purpose of conducting private and confidential transactions. A channel is defined by members (organizations), anchor peers per member, the shared ledger, chaincode application(s) and the ordering service node(s). Each transaction on the network is executed on a channel, where each party must be authenticated and authorized to transact on that channel. Each peer that joins a channel, has its own identity given by a membership services provider (MSP), which authenticates each peer to its channel peers and services.&lt;/p>
&lt;h2 id="process-the-proposal">Process the proposal&lt;/h2>
&lt;p>As the above diagram shows, processing the proposal happens in the 2nd step, which invokes &lt;code>Endorser.ProcessProposal(ctx context.Context, signedProp *pb.SignedProposal) (*pb.ProposalResponse, error)&lt;/code> and do the following jobs:&lt;/p>
&lt;ol>
&lt;li>Validate the proposal&lt;/li>
&lt;li>Simulate the execution of the proposal&lt;/li>
&lt;li>Sign the proposal and read/write set, then return the response&lt;/li>
&lt;/ol>
&lt;h3 id="unpack-and-validate-the-proposal">Unpack and Validate the Proposal&lt;/h3>
&lt;p>Since the proposal is serialized to bytes and signed, we need first unpack the proposal and verify the certification and signature. The &lt;code>proto.Unmarshal&lt;/code> is used to deserialize the message into the &lt;code>UnpackedProposal&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UnpackedProposal&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChannelHeader&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Proposal&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Proposal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SignatureHeader&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">SignatureHeader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SignedProposal&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">SignedProposal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ProposalHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s worth mentioning that the &lt;code>proposalHash&lt;/code> is calculated with &lt;code>sha256&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sha256&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">hdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">hdr&lt;/span>.&lt;span style="color:#a6e22e">SignatureHeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">ppBytes&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the transaction is preprocessed on the channel, we have to find the channel first：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">ChannelFetcher&lt;/span>.&lt;span style="color:#a6e22e">Channel&lt;/span>(&lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ProposalResponse&lt;/span>{&lt;span style="color:#a6e22e">Response&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#a6e22e">Message&lt;/span>: &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;channel &amp;#39;%s&amp;#39; not found&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>)}}, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Channel&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IdentityDeserializer&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">LocalMSP&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the code shows, if the &lt;code>channelID&lt;/code> is provided in the channel header, then we use it to find the channel, else we use the local membership manager to create a default channel.&lt;/p>
&lt;p>The validation is done in the method &lt;code>Endorser.preProcess(up *UnpackedProposal, channel *Channel) error&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>Validate the channel header&amp;rsquo;s type and epoch&lt;/li>
&lt;li>Validate the signature header&amp;rsquo;s nonce and creator, then compare the &lt;code>TxID&lt;/code> with &lt;code>Sha256(nonce+creator)&lt;/code>&lt;/li>
&lt;li>Find the creator by step 2&amp;rsquo;s creator in the channel then validate it.
&lt;ol>
&lt;li>Validate the creator&amp;rsquo;s certificate chain&lt;/li>
&lt;li>Validate the creator&amp;rsquo;s organization unit&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Verify signature with Cryptography algorithms&lt;/li>
&lt;li>Find the local transaction by &lt;code>TxId&lt;/code> provided in the channel header to avoid replay attacks.&lt;/li>
&lt;li>Check if the chaincode is a system chaincode(&lt;code>CSCC&lt;/code>, &lt;code>LSCC&lt;/code>, &lt;code>QSCC&lt;/code>), if not, ensure the proposal complies with the channel&amp;rsquo;s writers.&lt;/li>
&lt;/ol>
&lt;h3 id="simulate-the-proposal">Simulate the proposal&lt;/h3>
&lt;p>As the word &lt;code>simulate&lt;/code> implies, this part will not change the ledger. To do the simulation, We first need &lt;code>TxSimulator&lt;/code> and &lt;code>HistoryQueryExecutor&lt;/code>. (Note that &lt;code>txSim&lt;/code> acquires a shared lock(read lock) on the &lt;code>stateDB&lt;/code>, which will impact the block commits.) Then we call &lt;code>Endorser.simulateProposal&lt;/code> to get the result:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>invoke &lt;code>callChaincode&lt;/code> to call specified chaincode, which will finally invoke the &lt;code>ChaincodeSupport&lt;/code>&amp;rsquo;s method &lt;code>Invoke&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ChaincodeSupport&lt;/span>) &lt;span style="color:#a6e22e">Invoke&lt;/span>(&lt;span style="color:#a6e22e">txParams&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ccprovider&lt;/span>.&lt;span style="color:#a6e22e">TransactionParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeInput&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ccid&lt;/span>, &lt;span style="color:#a6e22e">cctype&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">CheckInvocation&lt;/span>(&lt;span style="color:#a6e22e">txParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;invalid invocation&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">Launch&lt;/span>(&lt;span style="color:#a6e22e">ccid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">execute&lt;/span>(&lt;span style="color:#a6e22e">cctype&lt;/span>, &lt;span style="color:#a6e22e">txParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>We will first check the invocation and determines if, how, and to where that invocation should be routed. The function &lt;code>CheckInvocation&lt;/code> returns the &lt;code>chancodeID&lt;/code>, &lt;code>chaincodeType&lt;/code>, and error. If the chaincode requires initialization, the &lt;code>chaincodeType&lt;/code> will be &lt;code>ChaincodeMessage_INIT&lt;/code>, otherwise &lt;code>ChaincodeMessage_TRANSACTION&lt;/code>. Remember that we have talked about the &lt;code>chaincodeType&lt;/code> in the &lt;a href="posts/understanding-the-start-process-of-hyperledger-chaincode/">previous post&lt;/a>.&lt;/li>
&lt;li>We then call &lt;code>Launch()&lt;/code> to create and launch chaincode runtime, and finally call &lt;code>dockerClient.CreateContainer&lt;/code> to create a docker container.&lt;/li>
&lt;li>Once the container is created successfully, we call &lt;code>execute&lt;/code> to run the chaincode. To do that, we first construct the &lt;code>chaincodeMessage&lt;/code> with the &lt;code>chaincodeType&lt;/code>, &lt;code>payload&lt;/code>(which is the &lt;code>input&lt;/code> we unmarshaled from the proposal), &lt;code>txID&lt;/code>, &lt;code>channelID&lt;/code> and then send it to chaincode via gRPC.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>For operations deploying or upgrading user chaincode through LSCC, it is necessary to use the &lt;code>Execute()&lt;/code> method again to initialize or upgrade the user chaincode instance.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The whole simulation may involve multiple rounds of gRPC communication between the endorser and the chaincode and these communications may want to change the ledger, as we said before, the ledger should not be modified during the simulation. So We put the mediate result to the simulator&amp;rsquo;s &lt;code>rwsetBuilder&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// SetState implements method in interface `ledger.TxSimulator`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">txSimulator&lt;/span>) &lt;span style="color:#a6e22e">SetState&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkWritePrecondition&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">rwsetBuilder&lt;/span>.&lt;span style="color:#a6e22e">AddToWriteSet&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if this has a key level signature policy, add it to the interest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkStateMetadata&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Once the simulation is done, we can get the results via &lt;code>GetTxSimulationResults&lt;/code>.&lt;/li>
&lt;li>With the simulation results, we can build the &lt;code>chaincodeInterest&lt;/code> that the client can pass to the discovery service to get the correct endorsement policy for the chaincode.&lt;/li>
&lt;/ol>
&lt;h3 id="sign-the-endorsement">Sign the endorsement&lt;/h3>
&lt;p>We have gotten the simulation result, the chaincode&amp;rsquo;s response, the chaincode event, and chaincodeID, we need to wrap them into an endorsement response and signature. A &lt;code>ProposalResonsePayload&lt;/code> is shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ProposalResponsePayload&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ProposalHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=proposal_hash,json=proposalHash,proto3&amp;#34; json:&amp;#34;proposal_hash,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Extension&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=extension,proto3&amp;#34; json:&amp;#34;extension,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The field &lt;code>Extension&lt;/code> is where we need to put the things in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cAct&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeAction&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Events&lt;/span>: &lt;span style="color:#a6e22e">event&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Results&lt;/span>: &lt;span style="color:#a6e22e">result&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Response&lt;/span>: &lt;span style="color:#a6e22e">response&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeId&lt;/span>: &lt;span style="color:#a6e22e">ccid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cActBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">cAct&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, we use &lt;code>EndorsementPlugin&lt;/code> to sign the payload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DefaultEndorsement&lt;/span>) &lt;span style="color:#a6e22e">Endorse&lt;/span>(&lt;span style="color:#a6e22e">prpBytes&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">SignedProposal&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Endorsement&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">signer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">SigningIdentityForRequest&lt;/span>(&lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrap&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed fetching signing identity&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// serialize the signing identity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">identityBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">signer&lt;/span>.&lt;span style="color:#a6e22e">Serialize&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;could not serialize the signing identity&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sign the concatenation of the proposal response and the serialized endorser identity with this endorser&amp;#39;s key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">signature&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">signer&lt;/span>.&lt;span style="color:#a6e22e">Sign&lt;/span>(append(&lt;span style="color:#a6e22e">prpBytes&lt;/span>, &lt;span style="color:#a6e22e">identityBytes&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;could not sign the proposal response payload&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endorsement&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Endorsement&lt;/span>{&lt;span style="color:#a6e22e">Signature&lt;/span>: &lt;span style="color:#a6e22e">signature&lt;/span>, &lt;span style="color:#a6e22e">Endorser&lt;/span>: &lt;span style="color:#a6e22e">identityBytes&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">endorsement&lt;/span>, &lt;span style="color:#a6e22e">prpBytes&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s clear the endorsement is composed of two parts: the signature of &lt;code>ProposalResponsePayload+EndorserIdentity&lt;/code> and the &lt;code>EndorserIdentity&lt;/code>.&lt;/p>
&lt;h2 id="the-proposalresponse">The ProposalResponse&lt;/h2>
&lt;p>The final &lt;code>ProposalResponse&lt;/code> returned to the client is shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ProposalResponse&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Version indicates message protocol version
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Version&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;varint,1,opt,name=version,proto3&amp;#34; json:&amp;#34;version,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Timestamp is the time that the message
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// was created as defined by the sender
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">timestamppb&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=timestamp,proto3&amp;#34; json:&amp;#34;timestamp,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A response message indicating whether the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// endorsement of the action was successful
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Response&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,4,opt,name=response,proto3&amp;#34; json:&amp;#34;response,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The payload of response. It is the bytes of ProposalResponsePayload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,5,opt,name=payload,proto3&amp;#34; json:&amp;#34;payload,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The endorsement of the proposal, basically
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the endorser&amp;#39;s signature over the payload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Endorsement&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Endorsement&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,6,opt,name=endorsement,proto3&amp;#34; json:&amp;#34;endorsement,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The chaincode interest derived from simulating the proposal.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Interest&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ChaincodeInterest&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,7,opt,name=interest,proto3&amp;#34; json:&amp;#34;interest,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Understanding the Start Process of Hyperledger Peer</title><link>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-peer/</link><pubDate>Sat, 05 Nov 2022 19:09:20 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-peer/</guid><description>&lt;p>In the last post, we explored the start process of the chaincode side container, which is simple: starting a gRPC stream and handling the message. However, the peer node&amp;rsquo;s start process is somehow complicated, which involves more components and data structures.&lt;/p></description><content>&lt;p>In the last post, we explored the start process of the chaincode side container, which is simple: starting a gRPC stream and handling the message. However, the peer node&amp;rsquo;s start process is somehow complicated, which involves more components and data structures.&lt;/p>
&lt;h2 id="launch-a-peer-node">Launch a peer node&lt;/h2>
&lt;p>It&amp;rsquo;s easy to launch a peer node using the command: &lt;code>peer node start&lt;/code>, which will finally invoke the function &lt;code>serve&lt;/code>. The &lt;code>serve&lt;/code> function, however, is not well readable and contains lots of start processes of different servers and data structures:&lt;/p>
&lt;ul>
&lt;li>System Server&lt;/li>
&lt;li>LedgerMgr&lt;/li>
&lt;li>gRPC Server&lt;/li>
&lt;li>Gossip Server&lt;/li>
&lt;li>Chaincode Support Server&lt;/li>
&lt;li>Deliver Server&lt;/li>
&lt;li>Chaincode Custodian Server&lt;/li>
&lt;li>Snapshot Server&lt;/li>
&lt;li>Gateway Server&lt;/li>
&lt;/ul>
&lt;h2 id="system-server">System Server&lt;/h2>
&lt;p>The &lt;code>System Server&lt;/code> is a simple HTTP server, initialized in the &lt;code>serve&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">opsSystem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newOperationsSystem&lt;/span>(&lt;span style="color:#a6e22e">coreConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">opsSystem&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the function name &lt;code>newOperationsSystem&lt;/code> indicates, the &lt;code>System server&lt;/code> works as a system monitor, which provides&lt;/p>
&lt;ul>
&lt;li>Health Check Handler, which is used to check the health status of the peer node.&lt;/li>
&lt;li>Logging Spec Handler, which is used to change the log level of the peer node.&lt;/li>
&lt;li>Metrics Provider, can be implemented by different providers, such as &lt;code>Prometheus&lt;/code> and &lt;code>StatsD&lt;/code>, via which we can get lots of metrics of the peer node.&lt;/li>
&lt;li>Version Info Handler, which is used to get the version information of the peer node.&lt;/li>
&lt;/ul>
&lt;h2 id="ledgermgr">LedgerMgr&lt;/h2>
&lt;p>A &lt;code>LedgerMgr&lt;/code> is a data structure that manages the lifecycle of the ledger, it&amp;rsquo;s data structure is defined as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LedgerMgr&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">creationLock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">joinBySnapshotStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">JoinBySnapshotStatus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">openedLedgers&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">ledger&lt;/span>.&lt;span style="color:#a6e22e">PeerLedger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ledgerProvider&lt;/span> &lt;span style="color:#a6e22e">ledger&lt;/span>.&lt;span style="color:#a6e22e">PeerLedgerProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ebMetadataProvider&lt;/span> &lt;span style="color:#a6e22e">MetadataProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>serve&lt;/code> function, the &lt;code>LedgerMgr&lt;/code> is initialized as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">peerInstance&lt;/span>.&lt;span style="color:#a6e22e">LedgerMgr&lt;/span> = &lt;span style="color:#a6e22e">ledgermgmt&lt;/span>.&lt;span style="color:#a6e22e">NewLedgerMgr&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ledgermgmt&lt;/span>.&lt;span style="color:#a6e22e">Initializer&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we pass an &lt;code>initializer&lt;/code> to the &lt;code>NewLedgerMgr&lt;/code> function, which will invoke &lt;code>kv.NewProvider&lt;/code> to take a series of initialization steps:&lt;/p>
&lt;ul>
&lt;li>initialize ledger ID Store to create a database for ledger IDs&lt;/li>
&lt;li>initialize block store to create a database for blocks&lt;/li>
&lt;li>initialize private data store to create a database for private data&lt;/li>
&lt;li>initialize history DB to create a database store for state history&lt;/li>
&lt;li>initialize config history manager to create a database store for config history&lt;/li>
&lt;li>initialize collElgNotifier to listen to the chaincode events&lt;/li>
&lt;li>initialize state listeners which include &lt;code>collElgNotifier&lt;/code> and &lt;code>configHistoryMgr&lt;/code>&lt;/li>
&lt;li>initialize state DB to create a database store for the state&lt;/li>
&lt;li>initialize ledger statistics to statistics the ledger block processing time, the block storage commit time, the state DB commit time and the transaction count&lt;/li>
&lt;li>scans for and deletes any ledger with a status of &lt;code>UNDER_CONSTRUCTION&lt;/code> or &lt;code>UNDER_DELETION&lt;/code>&lt;/li>
&lt;li>initialize snapshot directory to create a directory for the snapshot&lt;/li>
&lt;/ul>
&lt;h2 id="grpc-server">gRPC Server&lt;/h2>
&lt;p>The &lt;code>gRPC Server&lt;/code> here is a common server that can be wrapped by different services, such as &lt;code>DeliverServer&lt;/code>, &lt;code>SnapshotServer&lt;/code>. The &lt;code>gRPC Server&lt;/code> is initialized in the &lt;code>serve&lt;/code> function as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">peerServer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">comm&lt;/span>.&lt;span style="color:#a6e22e">NewGRPCServer&lt;/span>(&lt;span style="color:#a6e22e">listenAddr&lt;/span>, &lt;span style="color:#a6e22e">serverConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The server config contains the options such as &lt;code>MaxRecvMsgSize&lt;/code>, &lt;code>MaxSendMsgSize&lt;/code>, &lt;code>StreamInterceptors&lt;/code>, &lt;code>UnaryInterceptors&lt;/code>, etc.&lt;/p>
&lt;h2 id="gossip-server">Gossip Server&lt;/h2>
&lt;p>The &lt;code>Gossip Server&lt;/code> of a peer node is used to gossip the blocks and transactions to other peer nodes which based on the &lt;code>gossip&lt;/code> protocol. The &lt;code>Gossip Server&lt;/code> is initialized by &lt;code>initGossipService&lt;/code> function, which does the following steps:&lt;/p>
&lt;ul>
&lt;li>determine if TLS is enabled, if so, load and store the server&amp;rsquo;s and client&amp;rsquo;s TLS certificates&lt;/li>
&lt;li>invoke &lt;code>NewMCS&lt;/code> to create a message crypto service, which is used to authenticate the identity of the peer node and verify the signature of the message&lt;/li>
&lt;li>invoke &lt;code>NewSecurityAdvisor&lt;/code> to create a security advisor, which is an external auxiliary object that provides security and identity-related capabilities&lt;/li>
&lt;li>Wrap the &lt;code>gossipService&lt;/code> with &lt;code>gPRC Server&lt;/code> and the other components, such as &lt;code>MCS&lt;/code>, &lt;code>SecurityAdvisor&lt;/code>, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="chaincode-support-server">Chaincode Support Server&lt;/h2>
&lt;p>The &lt;code>Chaincode Support Server&lt;/code> is used to handle chaincode-related requests, such as &lt;code>Install&lt;/code>, &lt;code>Invoke&lt;/code>, &lt;code>Query&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ca&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tlsgen&lt;/span>.&lt;span style="color:#a6e22e">NewCA&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ccSrv&lt;/span>, &lt;span style="color:#a6e22e">ccEndpoint&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createChaincodeServer&lt;/span>(&lt;span style="color:#a6e22e">coreConfig&lt;/span>, &lt;span style="color:#a6e22e">ca&lt;/span>, &lt;span style="color:#a6e22e">peerHost&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chaincodeSupport&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincode&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeSupport&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ccSupSrv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeSupportServer&lt;/span>(&lt;span style="color:#a6e22e">chaincodeSupport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterChaincodeSupportServer&lt;/span>(&lt;span style="color:#a6e22e">ccSrv&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">ccSupSrv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">ccSrv&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the above code shows, the &lt;code>ChaincodeSupportServer&lt;/code> starts with the steps:&lt;/p>
&lt;ul>
&lt;li>Invoke &lt;code>NewCA&lt;/code> to create a self-signed CA for chaincode service&lt;/li>
&lt;li>Invoke &lt;code>createChaincodeServer&lt;/code> to create a listener(which is a gRPC server created with &lt;code>comm.NewGRPCServer&lt;/code>) using &lt;code>peer.chaincodeListneAddress&lt;/code>&lt;/li>
&lt;li>cast the &lt;code>chaincodeSupport&lt;/code> to &lt;code>pb.ChiancodeSupportServer&lt;/code> interface which must own the method (or API) &lt;code>Register(ChaincodeSupport_RegisterServer) error&lt;/code>&lt;/li>
&lt;li>Register the casted server API(&lt;code>ccSupSrv&lt;/code>) to the gRPC server(&lt;code>ccSrv.Server()&lt;/code>)&lt;/li>
&lt;li>Start gRPC server&lt;/li>
&lt;/ul>
&lt;h2 id="deliver-server">Deliver Server&lt;/h2>
&lt;p>The &lt;code>Deliver server&lt;/code> is primarily used for the delivery and filter of the blocks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DeliverServer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Deliver&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverFiltered&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverFilteredServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverWithPrivateData&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverWithPrivateDataServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As same as the &lt;code>Chaincode support Server&lt;/code>, we first create the instance of &lt;code>Deliver Server&lt;/code>, then register it to the gRPC server (the peer server, as mentioned above):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mutualTLS&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serverConfig&lt;/span>.&lt;span style="color:#a6e22e">SecOpts&lt;/span>.&lt;span style="color:#a6e22e">UseTLS&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">serverConfig&lt;/span>.&lt;span style="color:#a6e22e">SecOpts&lt;/span>.&lt;span style="color:#a6e22e">RequireClientCert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">policyCheckerProvider&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">resourceName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">PolicyCheckerFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>, &lt;span style="color:#a6e22e">channelID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">aclProvider&lt;/span>.&lt;span style="color:#a6e22e">CheckACL&lt;/span>(&lt;span style="color:#a6e22e">resourceName&lt;/span>, &lt;span style="color:#a6e22e">channelID&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">metrics&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">NewMetrics&lt;/span>(&lt;span style="color:#a6e22e">metricsProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">DeliverServer&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverHandler&lt;/span>: &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">NewHandler&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">DeliverChainManager&lt;/span>{&lt;span style="color:#a6e22e">Peer&lt;/span>: &lt;span style="color:#a6e22e">peerInstance&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coreConfig&lt;/span>.&lt;span style="color:#a6e22e">AuthenticationTimeWindow&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutualTLS&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PolicyCheckerProvider&lt;/span>: &lt;span style="color:#a6e22e">policyCheckerProvider&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterDeliverServer&lt;/span>(&lt;span style="color:#a6e22e">peerServer&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">abServer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The steps are shown from the above:&lt;/p>
&lt;ul>
&lt;li>Acquire the resource check &lt;code>policyCheckerProvider&lt;/code>, which invokes &lt;code>CheckACL&lt;/code> to check ACL (Access Control Lists) for the given channel(&lt;code>channelID&lt;/code>) using the &lt;code>env(the 1st parameter)&lt;/code>. As for the resources to be checked, the deliver focuses on the &lt;code>Event_FilteredBlock&lt;/code> and &lt;code>Event_Block&lt;/code>&lt;/li>
&lt;li>Create a handler to handle the events, which will parse the event, check the ACL, then delivery the blocks.&lt;/li>
&lt;li>Register the &lt;code>abServer&lt;/code> to the gRPC server.&lt;/li>
&lt;/ul>
&lt;h2 id="deploy-system-chaincode">Deploy System Chaincode&lt;/h2>
&lt;blockquote>
&lt;p>The System chaincodes are specialized chaincodes that run as part of the peer process as opposed to user chaincodes that run in separate docker containers. Examples of System Chaincodes include QSCC (Query System Chaincode) for ledger and other Fabric-related queries, CSCC (Configuration System Chaincode) which helps regulate access control, and LSCC (Lifecycle System Chaincode). Unlike a user chaincode, a system chaincode is not installed and instantiated using proposals from SDKs or CLI. It is registered and deployed by the peer at start-up.&lt;/p>
&lt;p>&lt;a href="https://hyperledger-fabric.readthedocs.io/en/release-1.3/systemchaincode.html">https://hyperledger-fabric.readthedocs.io/en/release-1.3/systemchaincode.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The following code shows how the system chaincodes are deployed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// deploy system chaincodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> []&lt;span style="color:#a6e22e">scc&lt;/span>.&lt;span style="color:#a6e22e">SelfDescribingSysCC&lt;/span>{&lt;span style="color:#a6e22e">lsccInst&lt;/span>, &lt;span style="color:#a6e22e">csccInst&lt;/span>, &lt;span style="color:#a6e22e">qsccInst&lt;/span>, &lt;span style="color:#a6e22e">lifecycleSCC&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">enabled&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">chaincodeConfig&lt;/span>.&lt;span style="color:#a6e22e">SCCAllowlist&lt;/span>[&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>()]; !&lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">||&lt;/span> !&lt;span style="color:#a6e22e">enabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;not deploying chaincode %s as it is not enabled&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">scc&lt;/span>.&lt;span style="color:#a6e22e">DeploySysCC&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span>, &lt;span style="color:#a6e22e">chaincodeSupport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function &lt;code>DeploySysCC&lt;/code> is finally invoked, in which the chaincode starts as we talked about &lt;a href="posts/understanding-the-start-process-of-hyperledger-chaincode/">before&lt;/a>. The difference is &lt;code>shim.StartInProc&lt;/code> is invoked instead of &lt;code>shim.Start&lt;/code>.&lt;/p>
&lt;h2 id="chaincode-custodian-server">Chaincode Custodian Server&lt;/h2>
&lt;p>The &lt;code>Chaincode Custodian&lt;/code> is responsible for enqueuing builds and launches of chaincodes as they become available and stops when chaincodes are no longer referenced by an active chaincode definition.&lt;/p>
&lt;p>The custodian follows the &lt;code>Producer-Consumer&lt;/code> pattern, where the requests to manage the chaincode lifecycle are added to a queue (by the Producer), and the Consumer (Custodian) retrieves and processes them.&lt;/p>
&lt;h2 id="snapshot-server">Snapshot Server&lt;/h2>
&lt;p>The &lt;code>Snapshot&lt;/code> is introduced in &lt;code>Fabric v2.3&lt;/code>, which gives us an alternative way to join new peers into a fabric network. The details can be found &lt;a href="https://hyperledger-fabric.readthedocs.io/en/latest/peer_ledger_snapshot.html">here&lt;/a>. Just like the &lt;code>Deliver&lt;/code>, we just need to create a snapshot server instance, and attach it to the peer gRPC server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">snapshotSvc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">snapshotgrpc&lt;/span>.&lt;span style="color:#a6e22e">SnapshotService&lt;/span>{&lt;span style="color:#a6e22e">LedgerGetter&lt;/span>: &lt;span style="color:#a6e22e">peerInstance&lt;/span>, &lt;span style="color:#a6e22e">ACLProvider&lt;/span>: &lt;span style="color:#a6e22e">aclProvider&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterSnapshotServer&lt;/span>(&lt;span style="color:#a6e22e">peerServer&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">snapshotSvc&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gateway-server">Gateway Server&lt;/h2>
&lt;p>The &lt;code>Gateway&lt;/code> is introduced in &lt;code>Fabric v2.4&lt;/code>, which provides a simplified, minimal API for submitting transactions to a Fabric network:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">GatewayServer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Endorse&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EndorseRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EndorseResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Submit&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SubmitRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SubmitResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CommitStatus&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SignedCommitStatusRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CommitStatusResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Evaluate&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EvaluateRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EvaluateResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeEvents&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SignedChaincodeEventsRequest&lt;/span>, &lt;span style="color:#a6e22e">Gateway_ChaincodeEventsServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The details can be found &lt;a href="https://hyperledger-fabric.readthedocs.io/en/latest/gateway.html">here&lt;/a>. Also, the gateway server is registered to the peer gRPC server in the same way same as the snapshot and deliver.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, launching a Hyperledger Fabric peer node involves initializing multiple servers and data structures such as the System Server, LedgerMgr, gRPC Server, Gossip Server, Chaincode Support Server, Deliver Server, Chaincode Custodian Server, Snapshot Server, Gateway Server, etc. While this post provides a high-level overview of these components, much more detail is required to truly understand how they work together to form a robust and secure blockchain network. In future discussions, we will delve deeper into each of these elements and explore their functions and interactions.&lt;/p></content></item><item><title>Understanding the Start Process of Hyperledger Chaincode</title><link>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-chaincode/</link><pubDate>Mon, 24 Oct 2022 22:39:40 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-chaincode/</guid><description>&lt;p>The topic at hand is &lt;code>User Chaincode (UCC)&lt;/code>, an essential component for application developers in the realm of blockchain technology. It provides the logic necessary to process states based on a distributed ledger, enabling developers to create complex applications.&lt;/p></description><content>&lt;p>The topic at hand is &lt;code>User Chaincode (UCC)&lt;/code>, an essential component for application developers in the realm of blockchain technology. It provides the logic necessary to process states based on a distributed ledger, enabling developers to create complex applications.&lt;/p>
&lt;p>In the context of Hyperledger Fabric, Chaincode is typically executed within Docker containers. Peers utilize the Docker API to create and launch Chaincode containers. Once a Chaincode container is up and running, it establishes a bi-directional &lt;code>gRPC &lt;/code> connection with the Peer, enabling communication via the exchange of ChaincodeMessages. To initiate requests to the Peer, the Chaincode container utilizes the interface provided by the &lt;code>shim&lt;/code> package.&lt;/p>
&lt;h2 id="the-typical-structure-of-chaincode">The typical structure of chaincode&lt;/h2>
&lt;p>The typical structure of the chaincode is presented below. Users only need to focus on the implementation of the &lt;code>Init()&lt;/code> and &lt;code>Invoke()&lt;/code> functions and use the &lt;code>shim.ChaincodeStubInterface&lt;/code> structure in them to implement the interaction logic with the ledger.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyChaincode&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>) &lt;span style="color:#a6e22e">Init&lt;/span>(&lt;span style="color:#a6e22e">stub&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeStubInterface&lt;/span>) &lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Success&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>) &lt;span style="color:#a6e22e">Invoke&lt;/span>(&lt;span style="color:#a6e22e">stub&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeStubInterface&lt;/span>) &lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Success&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-start-process">The start process&lt;/h2>
&lt;p>In the &lt;code>main&lt;/code> function we called the &lt;code>shim.Start&lt;/code> to start a chaincode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#a6e22e">Chaincode&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chaincodename&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;CORE_CHAINCODE_ID_NAME&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">chaincodename&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#39;CORE_CHAINCODE_ID_NAME&amp;#39; must be set&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">streamGetter&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">streamGetter&lt;/span> = &lt;span style="color:#a6e22e">userChaincodeStreamGetter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">streamGetter&lt;/span>(&lt;span style="color:#a6e22e">chaincodename&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">chaincodeAsClientChat&lt;/span>(&lt;span style="color:#a6e22e">chaincodename&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function first retrieves the value of the &lt;code>CORE_CHAINCODE_ID_NAME&lt;/code> in order to get a &lt;code>stream&lt;/code>, the implementation of the interface &lt;code>ClientStream&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ClientStream&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CloseSend&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>PeerChaincodeStream&lt;/code> is the common stream interface for peer-chaincode communication(send &amp;amp; receive chaincode message ):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Recv&lt;/span>() (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above stream interface is default implemented with &lt;code>gRPC&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">NewClientConn&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peerAddress&lt;/span>, &lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">TLS&lt;/span>, &lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">KaOpts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">NewRegisterClient&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We first establish a gRPC connection to the peer given the &lt;code>peerAddress&lt;/code>, then we create a new stream for the client side:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewChaincodeSupportClient&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">ClientConn&lt;/span>) &lt;span style="color:#a6e22e">ChaincodeSupportClient&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportClient&lt;/span>{&lt;span style="color:#a6e22e">cc&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportClient&lt;/span>) &lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">CallOption&lt;/span>) (&lt;span style="color:#a6e22e">ChaincodeSupport_RegisterClient&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">NewStream&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">_ChaincodeSupport_serviceDesc&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#e6db74">&amp;#34;/protos.ChaincodeSupport/Register&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportRegisterClient&lt;/span>{&lt;span style="color:#a6e22e">stream&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So here we can say that the stream is actually a streaming rpc.&lt;/p>
&lt;h3 id="the-chaincode-side-handler">The chaincode side handler&lt;/h3>
&lt;p>As what we will do next in web programming, we get conn via dialing to a server or listening to the port, we need a handler to process the data we accept from conn. We wrap the &lt;code>stream&lt;/code> and &lt;code>chaincode&lt;/code> into the &lt;code>handler&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// serialLock is used to prevent concurrent calls to Send on the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// PeerChaincodeStream. This is required by gRPC.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">serialLock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// chatStream is the client used to access the chaincode support server on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the peer.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">chatStream&lt;/span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// cc is the chaincode associated with this handler.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#a6e22e">Chaincode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// state holds the current state of this handler.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Multiple queries (and one transaction) with different txids can be executing in parallel for this chaincode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// responseChannels is the channel on which responses are communicated by the shim to the chaincodeStub.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// need lock to protect chaincode from attempting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// concurrent requests to the peer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">responseChannelsMutex&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">responseChannels&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After being initialized, the handler sends the first message to the peer to register the chaincode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">handler&lt;/span>.&lt;span style="color:#a6e22e">serialSend&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peerpb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>{&lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">peerpb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage_REGISTER&lt;/span>, &lt;span style="color:#a6e22e">Payload&lt;/span>: &lt;span style="color:#a6e22e">payload&lt;/span>}); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error sending chaincode REGISTER: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon successful registration, the chaincode starts a message processing loop, waiting to receive messages from the peer and messages about its own state transition.&lt;/p>
&lt;p>The chaincode and the peer use the &lt;code>FSM(Finite State Machine)&lt;/code> to complete a series of response operations to messages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When the peer receives a &lt;code>ChaincodeMessage_REGISTER&lt;/code> message from the chaincode container, it registers the message to a local Handler structure and returns a &lt;code>ChaincodeMessage_REGISTERED&lt;/code> message to the Chaincode container. The peer then updates its status to &lt;code>established&lt;/code> and sends a &lt;code>ChaincodeMessage_READY&lt;/code> message to the chaincode side, updating its status to &lt;code>ready&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The chaincode side receives the &lt;code>ChaincodeMessage_REGISTERED&lt;/code> message and updates its status from &lt;code>created&lt;/code> to &lt;code>established&lt;/code>. Upon receiving the &lt;code>ChaincodeMessage_READY&lt;/code> message, it updates its status to &amp;lsquo;ready&amp;rsquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The peer sends a &lt;code>ChaincodeMessage_INIT&lt;/code> message to the Chaincode container to trigger chaincode initialization operations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the chaincode container receives the &lt;code>ChaincodeMessage_INIT&lt;/code> message, it initializes the required &lt;code>ChaincodeStub&lt;/code> structure and calls the &lt;code>Init()&lt;/code> method in the chaincode code. After successful initialization, the chaincode container sends a &lt;code>ChaincodeMessage_COMPLETED&lt;/code> message to the peer, indicating that it is ready to be invoked.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the chaincode is invoked, the peer sends a &lt;code>ChaincodeMessage_TRANSACTION&lt;/code> message to the Chaincode.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon receiving this message, the Chaincode calls the &lt;code>Invoke()&lt;/code> method and sends messages, and based on the logic implemented by the user in the Invoke method, it can send messages such as&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_HISTORY_FOR_KEY&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_QUERY_RESULT&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_STATE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_STATE_BY_RANGE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_QUERY_STATE_CLOSE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_QUERY_STATE_NEXT&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_INVOKE_CHAINCODE&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>to the peer side. The peer processes these messages and responds with a &lt;code>ChaincodeMessage_RESPONSE&lt;/code> message. Finally, the chaincode replies with a &lt;code>ChaincodeMessage_COMPLETE&lt;/code> message to the Peer to indicate the completion of the call.&lt;/p>
&lt;ul>
&lt;li>During this process, the peer and chaincode sides periodically send &lt;code>ChaincodeMessage_KEEPALIVE&lt;/code> messages to each other to ensure that they remain connected.&lt;/li>
&lt;/ul>
&lt;p>Overall, this system enables communication between the chaincode and the peer using a set of standardized messages and a well-defined protocol, ensuring efficient and reliable interaction.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we explored the starting process of the hyperledger chaincode side container. We learned that this process primarily involves establishing a gRPC connection (though other methods like lib-p2p can also be used) with the peer side, and then starting a message handler to process incoming messages. By understanding the chaincode startup process, we gain a deeper understanding of how hyperledger fabric works, which can help us develop more efficient and effective blockchain applications.&lt;/p></content></item></channel></rss>