<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Michael's space</title><link>https://www.michaelchan.space/</link><description>Recent content on Michael's space</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright Â© 2023 author Michael Chan</copyright><lastBuildDate>Sat, 11 Mar 2023 14:28:53 +0800</lastBuildDate><atom:link href="https://www.michaelchan.space/index.xml" rel="self" type="application/rss+xml"/><item><title>Memo of Linux Kernel Bootstrap</title><link>https://www.michaelchan.space/posts/memo-of-linux-kernel-bootstrap/</link><pubDate>Sat, 11 Mar 2023 14:28:53 +0800</pubDate><guid>https://www.michaelchan.space/posts/memo-of-linux-kernel-bootstrap/</guid><description>&lt;p>I&amp;rsquo;m reading a book about Linux kernel &lt;code>0.11&lt;/code> recently, and this is a memo of what I&amp;rsquo;ve learned.&lt;/p></description><content>&lt;p>I&amp;rsquo;m reading a book about Linux kernel &lt;code>0.11&lt;/code> recently, and this is a memo of what I&amp;rsquo;ve learned.&lt;/p>
&lt;h2 id="1-bios">1. BIOS&lt;/h2>
&lt;p>The CPU runs in &lt;code>real mode&lt;/code> when it&amp;rsquo;s powered on: the &lt;code>CS&lt;/code> is &lt;code>0xFFFF&lt;/code>, &lt;code>IP&lt;/code> is &lt;code>0x0000&lt;/code>, &lt;code>CS:IP&lt;/code> points to the first instruction of the BIOS. The BIOS is stored in the ROM:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Interrupt Vector Table&lt;/th>
&lt;th style="text-align:center">BIOS Data&lt;/th>
&lt;th style="text-align:center">&lt;/th>
&lt;th style="text-align:center">Interrupt Service&lt;/th>
&lt;th style="text-align:center">&amp;mdash;&amp;gt;&lt;/th>
&lt;th style="text-align:center">BIOS Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0x00000 - 0x003FF&lt;/td>
&lt;td style="text-align:center">0x00400 - 0x004FF&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">0x0E05B - 0x0FFFE&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">0xFE000 - 0xFFFFF&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;ul>
&lt;li>The &lt;code>CS&lt;/code> is &lt;code>0xFFFF&lt;/code>, &lt;code>IP&lt;/code> is &lt;code>0x0000&lt;/code>, &lt;code>CS:IP&lt;/code> is calculated as &lt;code>0xFFFF*16 + 0x0000 = 0xFFFF0&lt;/code>.&lt;/li>
&lt;li>A Interrupt Vector comprises of 4 bytes: &lt;code>CS:IP&lt;/code>. And there are 256 Interrupt Vectors in the Interrupt Vector Table: &lt;code>0x0400/4 = 256&lt;/code>.&lt;/li>
&lt;li>In read mode, the CPU can only access the first 1MB(&lt;code>0x00000-0xFFFFF&lt;/code>) of memory.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="2-loading-kernel">2. Loading Kernel&lt;/h2>
&lt;h3 id="21-loading-boot-sector">2.1. Loading Boot Sector&lt;/h3>
&lt;p>After the BIOS have finished &lt;code>POST(Power On Self Test)&lt;/code>, it interrupts with &lt;code>INT 0x19&lt;/code> to read the first sector of the boot disk into the memory at &lt;code>0x7C00&lt;/code>, where the code &lt;code>bootsec.s&lt;/code> is loaded to.&lt;/p>
&lt;h3 id="22-loading-setup">2.2. Loading Setup&lt;/h3>
&lt;p>The &lt;code>bootsec.s&lt;/code> first desins memory placement:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">SETUPLEN = 4
BOOTSEG = 0x07C0
INITSEG = 0x9000
SETUPSEG = 0x9020
SYSSEG = 0x1000
ENDSEG = SYSSEG + SYSSIZE
&lt;/code>&lt;/pre>&lt;p>Then it copys itself to &lt;code>0x9000:0x0000(INITSEG:0x0000)&lt;/code> and loads the &lt;code>setup.s&lt;/code> with the interrupt &lt;code>INT 0x13&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">load_setup:
mov dx, #0x0000 ! drive 0, head 0
mov cx, #0x0002 ! sector 2, track 0
mov bx, #0x0200 ! address = 512, in INITSEG
mov ax, #0x0200+SETUPLEN ! service 2, nr of sectors
int 0x13 ! read it
jnc ok_setup
&lt;/code>&lt;/pre>&lt;p>The interrupt service &lt;code>INT 0x13&lt;/code> reads &lt;code>SETUPLEN&lt;/code> sectors at sector &lt;code>2&lt;/code> of the boot disk into the memory at &lt;code>INITSEG:0x0200&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>The high 8 bits of &lt;code>dx&lt;/code> is the drive number, and the low 8 bits is the head number.&lt;/li>
&lt;li>The high 8 bits of &lt;code>cx&lt;/code> is the traack number, and the low 8 bits is the sector number.&lt;/li>
&lt;li>The high 8 bits of &lt;code>ax&lt;/code> is the service number, and the low 8 bits is the number of sectors to read.&lt;/li>
&lt;li>The &lt;code>es:bx&lt;/code> is the address to read the data into. We have set &lt;code>es = INITSEG&lt;/code> before.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>The memory layout after the &lt;code>setup.s&lt;/code> is loaded:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">bootsec.s&lt;/th>
&lt;th style="text-align:center">setup.s&lt;/th>
&lt;th style="text-align:center">&amp;hellip;SP(Stack Pointer)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">0x90000 - 0x901FF&lt;/td>
&lt;td style="text-align:center">0x90200 - 0x903FF&lt;/td>
&lt;td style="text-align:center">&amp;hellip;0xFF000&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="23-loading-system">2.3. Loading System&lt;/h3>
&lt;p>The &lt;code>system&lt;/code> is then loaded into the memory at &lt;code>0x10000&lt;/code>, which reads 240 sectors after the &lt;code>setup&lt;/code> sector. After that, the root device is checked and it&amp;rsquo;s number is stored at &lt;code>INITSEG:508&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">org 508 ; 0x1FC
root_dev dw ROOT_DEV ; the root device number is stored here, a word(2 bytes)
boot_flag dw 0AA55h
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>The number of the root device is calculated as &lt;code>major * 256 + minor&lt;/code>. The more details can be found &lt;a href="https://www.kernel.org/doc/Documentation/admin-guide/devices.txt">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h3 id="24-jumping-to-setup">2.4. Jumping to Setup&lt;/h3>
&lt;p>Then it jumps to the &lt;code>setup.s&lt;/code> with &lt;code>jmpi 0, SETUPSEG&lt;/code>, start extracting the machine information with interrupts. The informations and their memory addresses are listed below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Information&lt;/th>
&lt;th style="text-align:center">Memory Address&lt;/th>
&lt;th style="text-align:center">Interrupt&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Cursor Position&lt;/td>
&lt;td style="text-align:center">0x90000&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Extended Memory Size&lt;/td>
&lt;td style="text-align:center">0x90002&lt;/td>
&lt;td style="text-align:center">0x15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Active Page&lt;/td>
&lt;td style="text-align:center">0x90004&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Video Mode&lt;/td>
&lt;td style="text-align:center">0x90006&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Number of Character Columns&lt;/td>
&lt;td style="text-align:center">0x90007&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">??&lt;/td>
&lt;td style="text-align:center">0x90008&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">EGA Memory&lt;/td>
&lt;td style="text-align:center">0x9000A&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Color(Mono) Mode&lt;/td>
&lt;td style="text-align:center">0x9000B&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Switch settings&lt;/td>
&lt;td style="text-align:center">0x9000C&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Feature bits&lt;/td>
&lt;td style="text-align:center">0x9000D&lt;/td>
&lt;td style="text-align:center">0x10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">1st Hard Disk Parameter Table&lt;/td>
&lt;td style="text-align:center">0x90080&lt;/td>
&lt;td style="text-align:center">the value of 0x41-0x45 interrupt vectors&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2nd Hard Disk Parameter Table&lt;/td>
&lt;td style="text-align:center">0x90090&lt;/td>
&lt;td style="text-align:center">the value of 0x46-0x50 interrupt vectors&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Root Device Number&lt;/td>
&lt;td style="text-align:center">0x901FC&lt;/td>
&lt;td style="text-align:center">stored when loading setup&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="3-preparing-for-protected-mode">3. Preparing for Protected Mode&lt;/h2>
&lt;h3 id="31-closing-the-interrupt">3.1. Closing the Interrupt&lt;/h3>
&lt;p>To close the interrupt, it first sets the &lt;code>IF(Interrupt Flag)&lt;/code> of the &lt;code>EFLAGS&lt;/code> to &lt;code>0&lt;/code> with the instruction: &lt;code>cli&lt;/code>. It then copies the kernel program at the &lt;code>0x10000&lt;/code> to the start of memory &lt;code>0x00000&lt;/code>, which overwrites the interrupt vector table and the BIOS data. The system can not deal with the interrupt anymore until it rebuilds the interrupt vector table, which is why the &lt;code>cli&lt;/code> is called before.&lt;/p>
&lt;h3 id="32-setting-up-the-gdt-and-idt">3.2. Setting up the GDT and IDT&lt;/h3>
&lt;p>In real mode, the CPU can access the physic address with &lt;code>DS:SI&lt;/code>, where the &lt;code>DS&lt;/code> stores &lt;code>segment base address&lt;/code> and the &lt;code>SI&lt;/code> stores &lt;code>offset&lt;/code>. And the segment address is calculated as &lt;code>DS*16 + SI&lt;/code>. However, in protected mode, the &lt;code>DS&lt;/code> stores the &lt;code>segment selector&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 15 2 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ¬âââââ¬âââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Descriptor index â TI âRPL â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââ´âââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>TI&lt;/code> is the &lt;code>Table Indicator&lt;/code>, which is &lt;code>0&lt;/code> for the &lt;code>GDT&lt;/code> and &lt;code>1&lt;/code> for the &lt;code>LDT&lt;/code>. The &lt;code>RPL&lt;/code> is the &lt;code>Requestor Privilege Level&lt;/code>, which is the privilege level of the segment. A &lt;code>Segment Descriptor&lt;/code> can be accessed in the &lt;code>GDT&lt;/code> or &lt;code>LDT&lt;/code> with the &lt;code>index&lt;/code> and the &lt;code>TI&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 31 23 22 21 20 19 15 14 12 11 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââ¬âââ¬âââ¬âââ¬âââ¬âââââââââââââ¬âââ¬âââââ¬âââ¬ââââââââââ¬âââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Base address â âD â âA â Segment â â D â â â Base address â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â 31 - 24 âG â/ â0 âV â limit âP â P âS â Type â 23 - 16 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â â âB â âL â 19-16 â â L â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââ´âââ´âââ´âââ´âââ´âââââââââââââ´âââ´âââââ´âââ´ââââââââââ´âââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââ¬ââââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Base address 15 - 0 â Segment limit 15 - 0 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââ´ââââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The base address can be extracted from the descriptor, and the physics address is calculated as &lt;code>base address + offset&lt;/code>.&lt;/p>
&lt;p>The &lt;code>GDT(Global Descriptor Table)&lt;/code> is stored in the memory, can be accessed by the &lt;code>GDTR(Global Descriptor Table Register)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 47 15
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââââââââââââ¬âââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Offset(liner address of GDT) â table size â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>setup.s&lt;/code> declares a &lt;code>GDT&lt;/code> with 256 entries and sets the &lt;code>GDTR&lt;/code> to point to it:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">lgdt gdt_48
gdt_48:
.word 0x800 ; gdt limit=2048, 256 GDT entries, a descriptor is 8 bytes
.word 512+gdt,0x9 ; gdt base = 0X9xxxx
&lt;/code>&lt;/pre>&lt;p>The &lt;code>gdt&lt;/code> is defined as:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">gdt:
.word 0,0,0,0 ; dummy
.word 0x07FF ; 8Mb - limit=2047
.word 0x0000 ; base address=0
.word 0x9A00 ; code read/exec
.word 0x00C0 ; granularity=4096, 386
.word 0x07FF ; 8Mb - limit=2047
.word 0x0000 ; base address=0
.word 0x9200 ; data read/write
.word 0x00C0 ; granularity=4096, 386
&lt;/code>&lt;/pre>&lt;p>There&amp;rsquo;re 3 descriptors in the &lt;code>GDT&lt;/code>, the first is empty, the second is for the code segment and the third is for the data segment.
Explanation of the second descriptor:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 31 23 22 21 20 19 15 14 12 11 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââ¬âââ¬âââ¬âââ¬âââ¬âââââââââââââ¬âââ¬âââââ¬âââ¬ââââââââââ¬âââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â 0x00 â1 â1 â0 â0 â 0x0 â1 â 00 â1 â 1010 â 0x00 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââ´âââ´âââ´âââ´âââ´âââââââââââââ´âââ´âââââ´âââ´ââââââââââ´âââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââ¬ââââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â 0x0000 â 0x07FF â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââ´ââââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>limit(0-15)&lt;/code>: &lt;code>0x07FF&lt;/code>&lt;/li>
&lt;li>&lt;code>base address(0-15)&lt;/code>: &lt;code>0x0000&lt;/code>&lt;/li>
&lt;li>&lt;code>base address(16-23)&lt;/code>: &lt;code>0x00&lt;/code>&lt;/li>
&lt;li>&lt;code>S&lt;/code>: &lt;code>1&lt;/code> for code/data segment&lt;/li>
&lt;li>&lt;code>Type&lt;/code>: &lt;code>1010&lt;/code> for code segment, execute/read,&lt;/li>
&lt;li>&lt;code>DPL&lt;/code>: &lt;code>00&lt;/code> for kernel code/data segment, ring 0&lt;/li>
&lt;li>&lt;code>P&lt;/code>: &lt;code>1&lt;/code> for present&lt;/li>
&lt;li>&lt;code>limit(16-19)&lt;/code>: &lt;code>0x0&lt;/code>&lt;/li>
&lt;li>&lt;code>AVL&lt;/code>: &lt;code>0&lt;/code>, available for system software&lt;/li>
&lt;li>&lt;code>D/B&lt;/code>: &lt;code>1&lt;/code> for 32-bit segment&lt;/li>
&lt;li>&lt;code>G&lt;/code>: &lt;code>1&lt;/code> for granularity 4KB, the limit then leads to &lt;code>[0x07FF(FFF)+1] Bytes = 8MB&lt;/code>&lt;/li>
&lt;li>&lt;code>base address(24-31)&lt;/code>: &lt;code>0x00&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The third descriptor is similar to the second one, except the &lt;code>Type&lt;/code> is &lt;code>1001&lt;/code> for data segment, read/write.&lt;/p>
&lt;p>The &lt;code>IDT(Interrupt Descriptor Table)&lt;/code> is also stored in the memory, can be accessed by the &lt;code>IDTR(Interrupt Descriptor Table Register)&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 47 15
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââââââââââââ¬âââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Offset(liner address of IDT) â table size â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>setup.s&lt;/code> declares an empty &lt;code>IDT&lt;/code> with 256 entries and sets the &lt;code>IDTR&lt;/code> to point to it:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">lidt idt_48
idt_48:
.word 0
.word 0,0
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s ok to have an empty &lt;code>IDT&lt;/code> at the beginning because the interrupt is not enabled yet.&lt;/p>
&lt;h3 id="32-turning-on-a20-address-line">3.2. Turning on A20 Address Line&lt;/h3>
&lt;p>The &lt;code>8086&lt;/code> CPU can address up to &lt;code>0xFFFFF&lt;/code>, which is &lt;code>1MB&lt;/code>. Turning on the &lt;code>A20&lt;/code> line allows the CPU to address up to &lt;code>0xFFFFFFFF&lt;/code>, which is &lt;code>4GB&lt;/code>. The more detail of &lt;code>A20&lt;/code> line can be found in &lt;a href="https://en.wikipedia.org/wiki/A20_line">this article&lt;/a>.&lt;/p>
&lt;h3 id="33-switch-to-protected-mode">3.3 Switch to Protected Mode&lt;/h3>
&lt;p>The &lt;code>setup.s&lt;/code> switches to the protected mode by setting the &lt;code>CR0&lt;/code> register:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">mov ax,#0x0001 ; protected mode (PE) bit
lmsw ax ; This is it;
jmpi 0,8 ; jmp offset 0 of segment 8 (cs)
&lt;/code>&lt;/pre>&lt;p>The &lt;code>lmsw&lt;/code> instruction loads the &lt;code>ax&lt;/code> to the &lt;code>CR0&lt;/code> register, and the &lt;code>jmpi&lt;/code> instruction jumps to the &lt;code>0x8:0x0&lt;/code> address. The index of segment descriptor can be extract from the segment selector: &lt;code>0x8&amp;gt;&amp;gt;3=0x1&lt;/code>, which is the index of the second descriptor in the &lt;code>GDT&lt;/code>. The &lt;code>0x0&lt;/code> is the offset of the segment. As the section 3.1, the &lt;code>base address&lt;/code> of the second descriptor is &lt;code>0x0000&lt;/code>, so the &lt;code>0x8:0x0&lt;/code> address is &lt;code>0x0000&lt;/code>, which points to the &lt;code>head.s&lt;/code> loaded before.&lt;/p>
&lt;h2 id="35-executing-heads">3.5 Executing head.s&lt;/h2>
&lt;p>The &lt;code>head.s&lt;/code> starts with:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">_pg_dir:
_startup_32:
mov eax,0x10
mov ds,ax
mov es,ax
mov fs,ax
mov gs,ax
lss esp,_stack_start
&lt;/code>&lt;/pre>&lt;p>The segment registers are set to &lt;code>0x10 (0x10&amp;gt;&amp;gt;3=2)&lt;/code>, which is the index of the third descriptor in the &lt;code>GDT&lt;/code>, the data segment. The &lt;code>lss esp,_stack_start&lt;/code> changes the stack pointer(which is currently &lt;code>0x9FF00&lt;/code>).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>stack_start &lt;span style="color:#f92672">=&lt;/span> {&lt;span style="color:#f92672">&amp;amp;&lt;/span>user_stack[PAGE_SIZE &lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>], &lt;span style="color:#ae81ff">0x10&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>lss is &lt;code>Load Segment Instruction&lt;/code>, which loads the lower word of the given value in memory to the specified register(here is &lt;code>esp&lt;/code>), and the upper word to the stack segment register(&lt;code>ss&lt;/code>). Here, &lt;code>0x10&lt;/code> is loaded to &lt;code>ss&lt;/code>, and the &lt;code>user_stack&lt;/code> address is loaded to &lt;code>esp&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>It then call &lt;code>setup_idt&lt;/code> to setup the &lt;code>IDT&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">setup_idt:
lea edx,ignore_int
mov eax,00080000h
mov ax,dx
mov dx,8E00h
lea edi,_idt
mov ecx,256
rp_sidt:
mov [edi],eax
mov [edi+4],edx
add edi,8
dec ecx
jne rp_sidt
lidt fword ptr idt_descr
ret
idt_descr:
dw 256*8-1
dd _idt
_idt:
DQ 256 dup(0)
&lt;/code>&lt;/pre>&lt;p>It initializes a 256-entry &lt;code>IDT(Interrupt Descriptor Table)&lt;/code> with the default &lt;code>ignore_int&lt;/code> handler. An &lt;code>ID(Interruption Descriptor)&lt;/code> is represented by 8 bytes:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 31 15 14 12 11 7 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââ¬âââ¬âââââ¬âââ¬ââââââââââ¬ââââââ¬ââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Offset(31-16) âP â DPLâ0 â Type â0 0 0â Unused â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââ´âââ´âââââ´âââ´ââââââââââ´ââââââ´ââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââ¬âââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Selector â Offset(15-0) â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââââââââââââââââââââââââââââââââââ´âââââââââââââââââââââââââââââââââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>0x8e00&lt;/code> is set to the &lt;code>32-47&lt;/code> bits of the descriptor, which means:&lt;/p>
&lt;ul>
&lt;li>&lt;code>P&lt;/code>: &lt;code>1&lt;/code> for present&lt;/li>
&lt;li>&lt;code>DPL&lt;/code>: &lt;code>00&lt;/code> for kernel code/data segment, ring 0&lt;/li>
&lt;li>&lt;code>Type&lt;/code>: &lt;code>1110&lt;/code> for interrupt gate, which means the interrupt is handled by the &lt;code>interrupt handler&lt;/code> in the &lt;code>IDT&lt;/code> entry.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>A gate (call, interrupt, task or trap) is used to transfer control of execution across segments. Privilege level checking is done differently depending on the type of destination and instruction used.
&amp;ndash; &lt;a href="https://stackoverflow.com/questions/3425085/the-difference-between-call-gate-interrupt-gate-trap-gate">stackoverflow&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The &lt;code>GPT&lt;/code> is then rebuilt since the older one was built to address the &lt;code>header.s&lt;/code> code after entrying the protected mode, and it&amp;rsquo;s not safe anymore(may be overwritten). The new one is just like the old one:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">_gdt:
DQ 0000000000000000h ;/* NULL descriptor */
DQ 00c09a0000000fffh ;/* 16Mb */
DQ 00c0920000000fffh ;/* 16Mb */
DQ 0000000000000000h ;/* TEMPORARY - don&amp;#39;t use */
DQ 252 dup(0)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>Note: In litle endian, the &lt;code>0x00c09a0000000fffh&lt;/code> leads to the &lt;code>limit=0x0fff&lt;/code>, which means the segment can address &lt;code>0x0ffffff+1=16M&lt;/code> bytes.&lt;/p>
&lt;/blockquote>
&lt;h3 id="36-enabling-paging">3.6. Enabling Paging&lt;/h3>
&lt;p>The &lt;code>header.s&lt;/code> is going to do the last work before jumping to the &lt;code>main&lt;/code> function: enabling paging.&lt;/p>
&lt;p>When enabling paging, the linear address, &lt;code>SegmentSelector:Offset&lt;/code>, is translated to the physical address by the following steps:&lt;/p>
&lt;ul>
&lt;li>
&lt;ol>
&lt;li>The &lt;code>SegmentSelector&lt;/code> is used to index the &lt;code>GDT&lt;/code> to get the &lt;code>SegmentDescriptor&lt;/code>, which contains the &lt;code>base address&lt;/code> of the segment.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="2">
&lt;li>The &lt;code>Offset&lt;/code> is added to the &lt;code>base address&lt;/code> to get the &lt;code>linear address&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;ol start="3">
&lt;li>The linear address is translated to the physical address by the &lt;code>MMU(Memory Management Unit)&lt;/code> according to the &lt;code>Page Table&lt;/code> in the &lt;code>Page Directory&lt;/code>.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 11 21
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ââââââââââââ¬âââââââââââ¬âââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â0000000011â0100000000â000000000100â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââ¬âââââââ´ââ¬âââââââââ´ââââ¬âââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â ââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â âââââââºâ â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â 3. Add the ââââââââââ¤âââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â offset â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â ââââââââââ¤ â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â PT 3 â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â ââââââââââââââââââââºâ ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â 2.Lookup for 256thââââââââââ¤ 0x4000ââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â entry in PT 3 â PT 2 â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â ââââââââââ¤ 0x3000 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â PT 1 â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â ââââââââââ¤ 0x2000 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â PT 0 â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â ââââââââââ¤ 0x1000 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââââââââââââââââââââââââºâ PD ââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1.Lookup for the 3rd â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> entry in PD ââââââââââ 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Memory
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To enable paging, it first executes the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">jmp after_page_tables
...
after_page_tables:
push 0
push 0
push 0
push L6
push _main
jmp setup_paging
L6:
jmp L6
&lt;/code>&lt;/pre>&lt;p>it push 3 &lt;code>0&lt;/code>s to the stack, which are the parameters to &lt;code>main&lt;/code>. Then it pushes the &lt;code>L6&lt;/code> label address to the stack, will endlessly transfer the program&amp;rsquo;s execution flow to the &lt;code>L6&lt;/code> until the program is interrupted or stopped.&lt;/p>
&lt;p>It then jumps to &lt;code>setup_paging&lt;/code> to create the &lt;code>Page Directory&lt;/code> and &lt;code>Page Tables&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">setup_paging:
mov ecx,1024*5
xor eax,eax
xor edi,edi
pushf
cld
rep stosd
mov eax,_pg_dir
mov [eax],pg0+7
mov [eax+4],pg1+7
mov [eax+8],pg2+7
mov [eax+12],pg3+7
mov edi,pg3+4092
mov eax,00fff007h
std
L3: stosd
sub eax,00001000h
jge L3
popf
&lt;/code>&lt;/pre>&lt;p>The &lt;code>PDE/PTE&lt;/code> is a 32-bit value:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> 31 11 7 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââââââââââââââ¬ââââââ¬ââ¬ââ¬ââ¬ââ¬ââ¬ââ¬ââ¬ââ¬ââ¬ââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Page Table Address (20 bits) PDE/ â â â â â â âPâPâUâRâ â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â âAVL âGâ0âDâAâGâCâWâ â âPâ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Page Address (20 bits) PTE â â â â â â âDâTâSâWâ â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââââââââââââââââââââââââââââââââââââââââââ´ââââââ´ââ´ââ´ââ´ââ´ââ´ââ´ââ´ââ´ââ´ââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After building PDEs and PTEs, it sets the &lt;code>CR3&lt;/code> register to the &lt;code>Page Directory&lt;/code>&amp;rsquo;s physical address:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">xor eax,eax
mov cr3,eax
&lt;/code>&lt;/pre>&lt;p>which is &lt;code>0&lt;/code> since the &lt;code>Page Directory&lt;/code> is at the beginning of the memory.
It then enable the paging by setting the &lt;code>CR0.PG&lt;/code> bit to &lt;code>1&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">mov eax,cr0
or eax,80000000h
mov cr0,eax
&lt;/code>&lt;/pre>&lt;p>The paging is enabled now, the final step is to jump to the &lt;code>main&lt;/code> function:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">ret
&lt;/code>&lt;/pre>&lt;p>which pops the value from the stack to the &lt;code>EIP&lt;/code> register, which is just &lt;code>main&lt;/code>&amp;rsquo;s address. And the &lt;code>CS&lt;/code> register holds &lt;code>0x8&lt;/code>(after switching to protected mode, &lt;code>jmpi 0,8&lt;/code> is called), which points to the &lt;code>GDT&lt;/code>&amp;rsquo;s second entry, code segment descriptor.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>This post records how to switch to the protected mode and enable paging. Now that the protected mode is enabled, the &lt;code>GDT&lt;/code> is built to make it possible to use the &lt;code>SegmentSelector:Offset&lt;/code> to address the memory in linear address space. The &lt;code>Page Directory&lt;/code> and &lt;code>Page Tables&lt;/code> are built to translate the linear address to the physical address.&lt;/p></content></item><item><title>Understanding the Behavior of Orderer</title><link>https://www.michaelchan.space/posts/understanding-the-behavior-of-orderer/</link><pubDate>Sat, 17 Dec 2022 20:09:10 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-behavior-of-orderer/</guid><description>&lt;p>The default orderer server in fabric composes of the &lt;code>Registrar&lt;/code>, which serves as a point of access and control for the individual channel resources. When the orderer is instantiated, the &lt;code>Registrar.StartChannels()&lt;/code> is invoked:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Registrar&lt;/span>) &lt;span style="color:#a6e22e">startChannels&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">chainSupport&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chainSupport&lt;/span>.&lt;span style="color:#a6e22e">start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">fChain&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fChain&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">systemChannelID&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Registrar initializing without a system channel, number of application channels: %d, with %d consensus.Chain(s) and %d follower.Chain(s)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span>), len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span>), len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>chains&lt;/code> and &lt;code>followers&lt;/code> above are different fields of the &lt;code>Registrar&lt;/code>. Both of them are &lt;code>map&lt;/code>s, the key is &lt;code>ChannelID&lt;/code>, the value, however, is &lt;code>ChainSupport&lt;/code> for &lt;code>chains&lt;/code> and &lt;code>Chain&lt;/code> for &lt;code>followers&lt;/code>. When the orderer starts, it scans local ledgers and determines if it is a member of each channel. If it is, add a &lt;code>ChainSupport&lt;/code> to the map &lt;code>chains&lt;/code>, otherwise, add a &lt;code>Chain&lt;/code> to the map &lt;code>followers&lt;/code>. The &lt;code>ChainSupport&lt;/code>, of course, composes of the &lt;code>Chain&lt;/code>, but can do more things than later.&lt;/p>
&lt;p>In this post, we will inspect the &lt;code>Chain&lt;/code> and &lt;code>ChainSupport&lt;/code>, and dig out what they have done when the orderer starts.&lt;/p></description><content>&lt;p>The default orderer server in fabric composes of the &lt;code>Registrar&lt;/code>, which serves as a point of access and control for the individual channel resources. When the orderer is instantiated, the &lt;code>Registrar.StartChannels()&lt;/code> is invoked:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Registrar&lt;/span>) &lt;span style="color:#a6e22e">startChannels&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">chainSupport&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chainSupport&lt;/span>.&lt;span style="color:#a6e22e">start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">fChain&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fChain&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">systemChannelID&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Registrar initializing without a system channel, number of application channels: %d, with %d consensus.Chain(s) and %d follower.Chain(s)&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span>), len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">chains&lt;/span>), len(&lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">followers&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>chains&lt;/code> and &lt;code>followers&lt;/code> above are different fields of the &lt;code>Registrar&lt;/code>. Both of them are &lt;code>map&lt;/code>s, the key is &lt;code>ChannelID&lt;/code>, the value, however, is &lt;code>ChainSupport&lt;/code> for &lt;code>chains&lt;/code> and &lt;code>Chain&lt;/code> for &lt;code>followers&lt;/code>. When the orderer starts, it scans local ledgers and determines if it is a member of each channel. If it is, add a &lt;code>ChainSupport&lt;/code> to the map &lt;code>chains&lt;/code>, otherwise, add a &lt;code>Chain&lt;/code> to the map &lt;code>followers&lt;/code>. The &lt;code>ChainSupport&lt;/code>, of course, composes of the &lt;code>Chain&lt;/code>, but can do more things than later.&lt;/p>
&lt;p>In this post, we will inspect the &lt;code>Chain&lt;/code> and &lt;code>ChainSupport&lt;/code>, and dig out what they have done when the orderer starts.&lt;/p>
&lt;h2 id="chainstart">Chain.Start&lt;/h2>
&lt;p>The &lt;code>Chain.Start&lt;/code> is called when the orderer is not a member of the channel which means the &lt;code>Chain&lt;/code> is responsible for just copying the blocks as the following codes show:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">Start&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">run&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Started&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">run&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">pull&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warnf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pull failed, error: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">pull&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">joinBlock&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">pullUpToJoin&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to pull up to join block&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Onboarding finished successfully, pulled blocks up to join-block&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">joinBlock&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ledgerResources&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">joinBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>).&lt;span style="color:#a6e22e">Data&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">joinBlock&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Panicf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Join block (%d) we pulled mismatches block we joined with&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">joinBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">pullAfterJoin&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to pull after join block&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Trigger creation of a new consensus.Chain.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Block pulling finished successfully, going to switch from follower to a consensus.Chain&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">halt&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">chainCreator&lt;/span>.&lt;span style="color:#a6e22e">SwitchFollowerToChain&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ledgerResources&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>Chian.pull&lt;/code> runs in a goroutine until it encounters an error. It does the following jobs:&lt;/p>
&lt;ol>
&lt;li>Pull the channel&amp;rsquo;s blocks to the latest if the &lt;code>joinBlock&lt;/code> the follower started with is not nil.&lt;/li>
&lt;li>Check if pulled mismatches block&lt;/li>
&lt;li>Pull the blocks continuously with &lt;code>Chain.pullAfterjoin&lt;/code>&lt;/li>
&lt;li>When pulling the blocks, we may add the current orderer to the membership of the channel, that&amp;rsquo;s why &lt;code>Chain.pullAfterjoin&lt;/code> can exit. Then we call &lt;code>c.halt()&lt;/code> to stop the &lt;code>follower&lt;/code>, and switch it to &lt;code>chain&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>It&amp;rsquo;s necessary to dig into more detail about the &lt;code>pullAfterJoin&lt;/code>.&lt;/p>
&lt;h3 id="pullafterjoin">pullAfterJoin&lt;/h3>
&lt;p>The method &lt;code>pullAfterJoin&lt;/code> is called by &lt;code>Chain&lt;/code> to pull blocks until the &lt;code>Chain&lt;/code> is not a &lt;code>follower&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">pullAfterJoin&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">loadLastConfig&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to load last config block&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPuller&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPullerFactory&lt;/span>.&lt;span style="color:#a6e22e">BlockPuller&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastConfig&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">stopChan&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;error creating block puller&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPuller&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">heightPollInterval&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">HeightPollMinInterval&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check membership
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">isMember&lt;/span>, &lt;span style="color:#a6e22e">errMem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">clusterConsenter&lt;/span>.&lt;span style="color:#a6e22e">IsChannelMember&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errMem&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to determine channel membership from last config&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">isMember&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">setConsensusRelation&lt;/span>(&lt;span style="color:#a6e22e">types&lt;/span>.&lt;span style="color:#a6e22e">ConsensusRelationConsenter&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Poll for latest network height to advance beyond ledger height.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">latestNetworkHeight&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">heightPollLoop&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endpoint&lt;/span>, &lt;span style="color:#a6e22e">networkHeight&lt;/span>, &lt;span style="color:#a6e22e">errHeight&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cluster&lt;/span>.&lt;span style="color:#a6e22e">LatestHeightAndEndpoint&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPuller&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">errHeight&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to get latest height and endpoint, error: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">errHeight&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Orderer endpoint %s has the biggest ledger height: %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">endpoint&lt;/span>, &lt;span style="color:#a6e22e">networkHeight&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">networkHeight&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ledgerResources&lt;/span>.&lt;span style="color:#a6e22e">Height&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// On success, slowly decrease the polling interval
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">decreaseRetryInterval&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">heightPollInterval&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">HeightPollMinInterval&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">latestNetworkHeight&lt;/span> = &lt;span style="color:#a6e22e">networkHeight&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span> &lt;span style="color:#a6e22e">heightPollLoop&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;My height: %d, latest network height: %d; going to wait %v for latest height to grow&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ledgerResources&lt;/span>.&lt;span style="color:#a6e22e">Height&lt;/span>(), &lt;span style="color:#a6e22e">networkHeight&lt;/span>, &lt;span style="color:#a6e22e">heightPollInterval&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">stopChan&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Received a stop signal&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ErrChainStopped&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">timeAfter&lt;/span>(&lt;span style="color:#a6e22e">heightPollInterval&lt;/span>):
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Exponential back-off, to avoid calling LatestHeightAndEndpoint too often.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">increaseRetryInterval&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">heightPollInterval&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">options&lt;/span>.&lt;span style="color:#a6e22e">HeightPollMaxInterval&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Pull to latest height or chain stop signal
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">pullUntilLatestWithRetry&lt;/span>(&lt;span style="color:#a6e22e">latestNetworkHeight&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>
&lt;p>Load the last config block to create a &lt;code>BlockPuller&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open a pulling loop where we do three jobs continuously:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Check if the current node is a member of the channel. If it is, change the &lt;code>consensusRelation&lt;/code> to &lt;code>consenter&lt;/code> and break the loop.&lt;/p>
&lt;p>There are 4 consensus relations: &lt;code>consenter&lt;/code>, &lt;code>follower&lt;/code>, &lt;code>config-tracker&lt;/code>, &lt;code>other&lt;/code>(for non-cluster node).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pull for latest network height to advance beyond ledger height. Here, if the height we pulled is not beyond the local height, we block the goroutine for &lt;code>heightPollInterval&lt;/code>, then increase the interval exponentially to avoid calling the pull height function too often:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">increaseRetryInterval&lt;/span>(&lt;span style="color:#a6e22e">retryInterval&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>, &lt;span style="color:#a6e22e">upperLimit&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">retryInterval&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">upperLimit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">retryInterval&lt;/span> = &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Duration&lt;/span>(&lt;span style="color:#ae81ff">1.5&lt;/span> &lt;span style="color:#f92672">*&lt;/span> float64(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">retryInterval&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">retryInterval&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">upperLimit&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">retryInterval&lt;/span> = &lt;span style="color:#a6e22e">upperLimit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Pull the blocks to the latest height. In the method &lt;code>Chain.pullUntilLatestWithRetry&lt;/code>, &lt;code>pullUntilTarget&lt;/code> is called to pull blocks to a given target height. The following code shows part of it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">seq&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">firstBlockToPull&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">nextBlock&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPuller&lt;/span>.&lt;span style="color:#a6e22e">PullBlock&lt;/span>(&lt;span style="color:#a6e22e">seq&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">nextBlock&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessagef&lt;/span>(&lt;span style="color:#a6e22e">cluster&lt;/span>.&lt;span style="color:#a6e22e">ErrRetryCountExhausted&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to pull block %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">seq&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">reportedPrevHash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">PreviousHash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">Equal&lt;/span>(&lt;span style="color:#a6e22e">reportedPrevHash&lt;/span>, &lt;span style="color:#a6e22e">actualPrevHash&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;block header mismatch on sequence %d, expected %x, got %x&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, &lt;span style="color:#a6e22e">actualPrevHash&lt;/span>, &lt;span style="color:#a6e22e">reportedPrevHash&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">actualPrevHash&lt;/span> = &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">BlockHeaderHash&lt;/span>(&lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ledgerResources&lt;/span>.&lt;span style="color:#a6e22e">Append&lt;/span>(&lt;span style="color:#a6e22e">nextBlock&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessagef&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to append block %d to the ledger&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">IsConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">nextBlock&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Pulled blocks from %d to %d, last block is config&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">firstBlockToPull&lt;/span>, &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastConfig&lt;/span> = &lt;span style="color:#a6e22e">nextBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPullerFactory&lt;/span>.&lt;span style="color:#a6e22e">UpdateVerifierFromConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">nextBlock&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessagef&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to update verifier from last config, block number: %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">updateEndpoints&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endpoints&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cluster&lt;/span>.&lt;span style="color:#a6e22e">EndpointconfigFromConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">nextBlock&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">cryptoProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessagef&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed to extract endpoints from last config, block number: %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">nextBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockPuller&lt;/span>.&lt;span style="color:#a6e22e">UpdateEndpoints&lt;/span>(&lt;span style="color:#a6e22e">endpoints&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>If the block we just pulled is nil, return the number of pulled blocks with an error.&lt;/li>
&lt;li>If this block&amp;rsquo;s &lt;code>PreviousHash&lt;/code> is not the same as the previously pulled block&amp;rsquo;s, return. Note that, the pulling is from back to front.&lt;/li>
&lt;li>update &lt;code>actualPrevHash&lt;/code> to this block&amp;rsquo;s hash, then write this block to the ledger.&lt;/li>
&lt;li>If this block is a config block, then we update &lt;code>c.lastConfig&lt;/code> to this block, and we may want to update the verifier and endpoint according to this block.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="chainsupportstart">ChainSupport.Start&lt;/h2>
&lt;p>The &lt;code>ChainSupport.Start&lt;/code> finally creates a goroutine with &lt;code>go c.run()&lt;/code>, which will block for 5 kinds of events we will talk respectively:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">submitC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">applyC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">timer&lt;/span>.&lt;span style="color:#a6e22e">C&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">sn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">snapC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">doneC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="case--submitc">case &amp;lt;-submitC&lt;/h3>
&lt;p>We order the endorsements in this case as discussed in the &lt;a href="https://www.michaelchan.space/posts/understanding-broadcast/">previous post&lt;/a> if the current node is a raft leader:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">batches&lt;/span>, &lt;span style="color:#a6e22e">pending&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ordered&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">req&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>ordered&lt;/code> function, we first get the config &lt;code>sequence&lt;/code> of our channel and determine if the message is a config message. If it is, we take the following steps:&lt;/p>
&lt;ol>
&lt;li>If the &lt;code>sequence&lt;/code> carried by the message is less than the current, call &lt;code>ProcessCOnfigMsg&lt;/code> to re-validate and reproduce config message.&lt;/li>
&lt;li>Call &lt;code>checkForEvictionNCertRotation&lt;/code> check for node eviction and certificate rotation by comparing the &lt;code>config.Consenters&lt;/code> packed in the message with &lt;code>Chain.opts.Consenters&lt;/code>. We say a node is rotated when its current certificate is not showing in the &lt;code> config.Consenters&lt;/code> and evicted when it is not showing in the &lt;code>config.Consenters&lt;/code>.&lt;/li>
&lt;li>A node is evicted or its certificate is rotated means that it&amp;rsquo;s not capable of being a leader and we should transfer the leadership to another node.&lt;/li>
&lt;li>After the transfer, we forward the transaction message to the new leader.&lt;/li>
&lt;li>Call &lt;code>BlockCutter.Cut()&lt;/code> to package the pending transactions with the config transaction into a batch since one block should consist of only one config transaction.&lt;/li>
&lt;/ol>
&lt;p>If the message is a normal transaction, then we call &lt;code>BlockCutter.Ordered&lt;/code> to add the message to the pending batch or the cutted batch according to the following rules:&lt;/p>
&lt;ol>
&lt;li>The message&amp;rsquo;s size should not be larger than the &lt;code>PreferredMaxBytes&lt;/code>.(Note that we will get two blocks: pending message and this message)&lt;/li>
&lt;li>Enqueuing the message into the pending batch should not cause the total bytes size larger than the &lt;code>PreferredMaxBytes&lt;/code>.&lt;/li>
&lt;li>Enqueuing the message into the pending batch should not cause the message count larger than &lt;code>MaxMessageCount&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>If the message is pending, then we start the &lt;code>timer&lt;/code> (we will talk about it in the case &lt;code>&amp;lt;-timer.C()&lt;/code>) and then returns, otherwise, we stop timer and call &lt;code>propose&lt;/code>:&lt;/p>
&lt;h4 id="propose">Propose&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">propose&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>, &lt;span style="color:#a6e22e">bc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">blockCreator&lt;/span>, &lt;span style="color:#a6e22e">batches&lt;/span> &lt;span style="color:#f92672">...&lt;/span>[]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">batch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">batches&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bc&lt;/span>.&lt;span style="color:#a6e22e">createNextBlock&lt;/span>(&lt;span style="color:#a6e22e">batch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Created block [%d], there are %d blocks in flight&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockInflight&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Panic&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Programming error: limit of in-flight blocks does not properly take effect or block is proposed by follower&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if it is config block, then we should wait for the commit of the block
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">IsConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">configInflight&lt;/span> = &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockInflight&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the above code shows, we create a block for each batch and send the block to the channel whose buffer&amp;rsquo;s size is &lt;code>MaxInflightBlocks&lt;/code>. The other goroutine will take the block from the channel and process it. Then we add one to the counter &lt;code>configInflight&lt;/code> if the block is a config block and one to the &lt;code>blockInflight&lt;/code>.&lt;/p>
&lt;h4 id="createnextblock">CreateNextBlock&lt;/h4>
&lt;p>A &lt;code>Block&lt;/code> comprises three components: &lt;code>Header&lt;/code>, &lt;code>Data&lt;/code>, and &lt;code>Metadata&lt;/code>, which are represented by the following data structures:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">BlockHeader&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Number&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;varint,1,opt,name=number,proto3&amp;#34; json:&amp;#34;number,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PreviousHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=previous_hash,json=previousHash,proto3&amp;#34; json:&amp;#34;previous_hash,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DataHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,3,opt,name=data_hash,json=dataHash,proto3&amp;#34; json:&amp;#34;data_hash,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">BlockData&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> [][]&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,rep,name=data,proto3&amp;#34; json:&amp;#34;data,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">BlockMetadata&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Metadata&lt;/span> [][]&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,rep,name=metadata,proto3&amp;#34; json:&amp;#34;metadata,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To create a block given a batch of transactions, we first marshal each of the transactions into the &lt;code>[]byte&lt;/code> form and assemble them to the &lt;code>BlockData&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">BlockData&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span>: make([][]&lt;span style="color:#66d9ef">byte&lt;/span>, len(&lt;span style="color:#a6e22e">envs&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">envs&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>], &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then we construct a block with no data and no metadata given the block&amp;rsquo;s &lt;code>seqNum&lt;/code> and &lt;code>previousHash&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">BlockHeader&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span> = &lt;span style="color:#a6e22e">seqNum&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">PreviousHash&lt;/span> = &lt;span style="color:#a6e22e">previousHash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">DataHash&lt;/span> = []&lt;span style="color:#66d9ef">byte&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">BlockData&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">metadataContents&lt;/span> [][]&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">BlockMetadataIndex_name&lt;/span>); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metadataContents&lt;/span> = append(&lt;span style="color:#a6e22e">metadataContents&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">BlockMetadata&lt;/span>{&lt;span style="color:#a6e22e">Metadata&lt;/span>: &lt;span style="color:#a6e22e">metadataContents&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>BlockMetadataIndex&lt;/code> above indicates the metadata can be the &lt;code>SIGNATURES&lt;/code>, &lt;code>LAST_CONFIG&lt;/code>(deprecated due to the config block) , &lt;code>TRANSACTIONS_FILTER&lt;/code>, &lt;code>ORDERER&lt;/code>(deprecated), or &lt;code>COMMIT_HASH&lt;/code>.&lt;/p>
&lt;p>The header&amp;rsquo;s &lt;code>DataHash&lt;/code> can be derived from &lt;code>BlockData&lt;/code>: &lt;code>block.Header.DataHash = protoutil.BlockDataHash(data)&lt;/code>.&lt;/p>
&lt;h4 id="leader-propose-block">Leader Propose Block&lt;/h4>
&lt;p>When a node becomes a leader, it owns the capability to process the yield blocks by giving a channel to receive the blocks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">becomeLeader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() (&lt;span style="color:#66d9ef">chan&lt;/span>&lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>, &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">CancelFunc&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockInflight&lt;/span> = &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">MaxInflightBlocks&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">WithCancel&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">MarshalOrPanic&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Node&lt;/span>.&lt;span style="color:#a6e22e">Propose&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to propose block [%d] to raft and discard %d blocks in queue: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, len(&lt;span style="color:#a6e22e">ch&lt;/span>), &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Proposed block [%d] to raft consensus&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ctx&lt;/span>.&lt;span style="color:#a6e22e">Done&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Quit proposing blocks, discarded %d blocks in the queue&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">ch&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">ch&lt;/span>, &lt;span style="color:#a6e22e">cancel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After accepting a block, the leader proposes appending it to the blockchain using the &lt;code>raft&lt;/code> consensus algorithm.&lt;/p>
&lt;h3 id="case--capplyc">case &amp;lt;-c.applyC&lt;/h3>
&lt;p>The block is sent to the other orderers or enqueued into the local raft node&amp;rsquo;s unstable entries. Once the entries are committed, the &lt;code>n.chain.applyC &amp;lt;- apply{rd.CommittedEntries, rd.SoftState}&lt;/code> instruction is executed. Here, the &lt;code>CommittedEntries&lt;/code> are those blocks the majority of orderers agree to add to the blockchain. The &lt;code>SoftState&lt;/code> describes the node status and the current leader.&lt;/p>
&lt;p>We first check the &lt;code>SoftState&lt;/code> since it determines whether the current node is the leader or not:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">newLeader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">LoadUint64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">Lead&lt;/span>) &lt;span style="color:#75715e">// etcdraft requires atomic access
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newLeader&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">Lead&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Raft leader changed: %d -&amp;gt; %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">Lead&lt;/span>, &lt;span style="color:#a6e22e">newLeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Metrics&lt;/span>.&lt;span style="color:#a6e22e">LeaderChanges&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">atomic&lt;/span>.&lt;span style="color:#a6e22e">StoreUint64&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastKnownLeader&lt;/span>, &lt;span style="color:#a6e22e">newLeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newLeader&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raftID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">propC&lt;/span>, &lt;span style="color:#a6e22e">cancelProp&lt;/span> = &lt;span style="color:#a6e22e">becomeLeader&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">Lead&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raftID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">becomeFollower&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">foundLeader&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">Lead&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">raft&lt;/span>.&lt;span style="color:#a6e22e">None&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">newLeader&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">raft&lt;/span>.&lt;span style="color:#a6e22e">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">quitCandidate&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">isCandidate&lt;/span>(&lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">RaftState&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">isCandidate&lt;/span>(&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">soft&lt;/span>.&lt;span style="color:#a6e22e">RaftState&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">foundLeader&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">quitCandidate&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">errorCLock&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">errorC&lt;/span> = make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">errorCLock&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>When the current node is a leader, if leadership changes, it becomes a follower.&lt;/li>
&lt;li>When the current node is a follower, if leadership changes and the new leader is itself, it becomes a follower.&lt;/li>
&lt;li>When the current node is a candidate, but changes to another role or a leader is found, it quit electing:&lt;/li>
&lt;/ul>
&lt;p>We next call &lt;code>apply&lt;/code> to write blocks.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">raftpb&lt;/span>.&lt;span style="color:#a6e22e">EntryNormal&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Data&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">position&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">accDataSize&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> uint32(len(&lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Data&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Index&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Received block with raft index (%d) &amp;lt;= applied index (%d), skip&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Index&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">block&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">UnmarshalBlockOrPanic&lt;/span>(&lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">writeBlock&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Index&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span> = &lt;span style="color:#a6e22e">ents&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">Index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we &lt;code>ents[i].Index&lt;/code> is the entry&amp;rsquo;s index in the &lt;code>Storage&lt;/code> of the raft node, we only write those blocks whose index is not larger than &lt;code>appliedIndex&lt;/code> to avoid writing the same block twice. After calling &lt;code>writeBlock&lt;/code>, we update the &lt;code>appliedIndex&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">writeBlock&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">Block&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Panicf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got block [%d], expect block [%d]&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Got block [%d], expect block [%d], this node was forced to catch up&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastBlock&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockInflight&lt;/span> &amp;gt; &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">blockInflight&lt;/span>&lt;span style="color:#f92672">--&lt;/span> &lt;span style="color:#75715e">// only reduce on leader
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">lastBlock&lt;/span> = &lt;span style="color:#a6e22e">block&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Writing block [%d] (Raft index: %d) to ledger&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">block&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>.&lt;span style="color:#a6e22e">Number&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">IsConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">writeConfigBlock&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">index&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raftMetadataLock&lt;/span>.&lt;span style="color:#a6e22e">Lock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">BlockMetadata&lt;/span>.&lt;span style="color:#a6e22e">RaftIndex&lt;/span> = &lt;span style="color:#a6e22e">index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">MarshalOrPanic&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">BlockMetadata&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raftMetadataLock&lt;/span>.&lt;span style="color:#a6e22e">Unlock&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">WriteBlock&lt;/span>(&lt;span style="color:#a6e22e">block&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We want the number of the block to be written is not less than the previous block&amp;rsquo;s. Then we modify the &lt;code>blockInflight&lt;/code> for the leader to avoid closing the &lt;code>submitC&lt;/code>. For the config block, call the &lt;code>writeConfigBlock&lt;/code>. In the end, we add the raft index to the block&amp;rsquo;s metadata.&lt;/p>
&lt;h3 id="case---timerc">case &amp;lt;- timer.C()&lt;/h3>
&lt;p>Remember that when the messages in the pending batch are not enough for a block, a timer starts. Every time the timer ticks, we package the messages to a block despite the number or size of the messages. And that&amp;rsquo;s all it does.&lt;/p>
&lt;h3 id="sn---csnapc">sn := &amp;lt;-c.snapC&lt;/h3>
&lt;p>The &lt;code>snapC&lt;/code> is a signal to catch up with snapshot, it&amp;rsquo;s used in the following scenes:&lt;/p>
&lt;ul>
&lt;li>The node is evicted&lt;/li>
&lt;li>The node is just started&lt;/li>
&lt;li>The node&amp;rsquo;s snapshot is not empty&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">sn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">snapC&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Debugf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Skip snapshot taken at index %d, because it is behind current applied index %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>, &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">confState&lt;/span> = &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">ConfState&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">appliedIndex&lt;/span> = &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Received artificial snapshot to trigger catchup&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">catchUp&lt;/span>(&lt;span style="color:#a6e22e">sn&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Panicf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Failed to recover from snapshot taken at Term %d and Index %d: %s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Term&lt;/span>, &lt;span style="color:#a6e22e">sn&lt;/span>.&lt;span style="color:#a6e22e">Metadata&lt;/span>.&lt;span style="color:#a6e22e">Index&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the index in the snapshot is large than &lt;code>appliedIndex&lt;/code>, we should catch up with the snapshot. We can create a &lt;code>BlockPuller&lt;/code> to pull all the blocks behind the snapshot.&lt;/p>
&lt;h3 id="case--cdonec">case &amp;lt;-c.doneC&lt;/h3>
&lt;p>In this case, we shut down the chain gracefully:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">stopTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cancelProp&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">errorC&lt;/span>: &lt;span style="color:#75715e">// avoid closing closed channel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">default&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">errorC&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">periodicChecker&lt;/span>.&lt;span style="color:#a6e22e">Stop&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Stop the timer&lt;/li>
&lt;li>cancel proposing block&lt;/li>
&lt;li>close error channel&lt;/li>
&lt;li>stop the periodic checker&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we learned how transactions are broadcasted from the leader to other followers with the consensus algorithm. We should note that the key point for the ordering service to function properly is the consensus algorithm, though we haven&amp;rsquo;t discussed it too much.&lt;/p></content></item><item><title>Understanding Broadcast</title><link>https://www.michaelchan.space/posts/understanding-broadcast/</link><pubDate>Mon, 05 Dec 2022 16:19:01 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-broadcast/</guid><description>&lt;p>In the previous post, we discussed how a proposal proposed by a client gets endorsed by other endorsers. When the client has collected enough endorsements for the proposal, it then needs to package these endorsements and send a message to the order service in order to broadcast the transaction wrapped in the proposal. In this post, we will first learn how endorsements are packaged into an &lt;code>Envelope&lt;/code> that can be sent to order service later. Then we will inspect the important role &lt;code>orderer&lt;/code> and figure out how it runs.&lt;/p></description><content>&lt;p>In the previous post, we discussed how a proposal proposed by a client gets endorsed by other endorsers. When the client has collected enough endorsements for the proposal, it then needs to package these endorsements and send a message to the order service in order to broadcast the transaction wrapped in the proposal. In this post, we will first learn how endorsements are packaged into an &lt;code>Envelope&lt;/code> that can be sent to order service later. Then we will inspect the important role &lt;code>orderer&lt;/code> and figure out how it runs.&lt;/p>
&lt;h2 id="create-an-envelope">Create an envelope&lt;/h2>
&lt;p>The &lt;code>Envelope&lt;/code> wraps a payload with a signature so that the message may be authenticated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Envelope&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A marshaled Payload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=payload,proto3&amp;#34; json:&amp;#34;payload,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A signature by the creator specified in the Payload header
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Signature&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=signature,proto3&amp;#34; json:&amp;#34;signature,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We must wrap our endorsements, the original proposal, and the signer into the &lt;code>Payload&lt;/code> above. The whole process can be concluded with the following diagram:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââº&lt;/span>&lt;span style="color:#a6e22e">Signature&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââº&lt;/span> &lt;span style="color:#a6e22e">Envelope&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#a6e22e">signer&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââ´ââââ¤&lt;/span> &lt;span style="color:#a6e22e">Bytes&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#a6e22e">Sign&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââ²ââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââ´ââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââ¤&lt;/span>&lt;span style="color:#a6e22e">TransactionByte&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââ¤&lt;/span> &lt;span style="color:#a6e22e">Transaction&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââ²ââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââ²âââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââ´ââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââ´ââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span> &lt;span style="color:#a6e22e">Header&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââº&lt;/span>&lt;span style="color:#a6e22e">SignatureHeader&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">ââââââº&lt;/span>&lt;span style="color:#a6e22e">TransactionAction&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââ²ââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#a6e22e">proposal&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââ¤&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââ´ââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#a6e22e">Bytes&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââ²ââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââº&lt;/span> &lt;span style="color:#a6e22e">PayloadBytes&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââ´ââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">ââââº&lt;/span>&lt;span style="color:#a6e22e">ActionPayload&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââº&lt;/span>&lt;span style="color:#a6e22e">EndorsedAction&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">âââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââ²ââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>&lt;span style="color:#a6e22e">endorsement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">âââââ¤&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span>&lt;span style="color:#a6e22e">Endorsement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">âââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââ´ââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">ââââââº&lt;/span> &lt;span style="color:#a6e22e">Endorsements&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ââââââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span>&lt;span style="color:#a6e22e">Endorsement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">âââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>&lt;span style="color:#a6e22e">endorsement&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">âââââ¤&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââº&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">â&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">âââââââââââââ&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Don&amp;rsquo;t get panic about the above diagram. We first extract the &lt;code>Endorsement&lt;/code> and &lt;code>Payload&lt;/code> from all the endorsements the client receives. Of course, we should ensure that all the payloads are the same. Note that the &lt;code>Payload&lt;/code> comprises &lt;code>ProposalHash&lt;/code>, &lt;code>Events&lt;/code>, &lt;code>Results,&lt;/code> and &lt;code>ChaincodeID&lt;/code>, which describe how a proposal is executed on a channel, and the endorsement gives the endorser and signature. With the &lt;code>EndorsedAction&lt;/code>, &lt;code>PayloadBytes&lt;/code> from the original proposal, and the &lt;code>SignatureHeader&lt;/code> extracted from the original proposal&amp;rsquo;s header, we can get the final &lt;code>Transaction&lt;/code>, which will be sent to the order service. Still, before that, we need to do the sign trick again for this &lt;code>Transaction&lt;/code>.&lt;/p>
&lt;h2 id="broadcast">Broadcast&lt;/h2>
&lt;p>The client first calls the function &lt;code>GetBroadcastClientFunc&lt;/code> to get a broadcast client:&lt;/p>
&lt;ol>
&lt;li>Create an instance of an &lt;code>OrderClient&lt;/code> containing &lt;code>orderers' addresses&lt;/code> and &lt;code>clientConfig&lt;/code> from the environment&lt;/li>
&lt;li>Create a gRPC connection object &lt;code>conn&lt;/code> for each of the orderers&amp;rsquo; addresses, with which create an &lt;code>atomicBroadcastClient&lt;/code>&lt;/li>
&lt;li>Invoke the &lt;code>actomicBroadcastClient&lt;/code>&amp;rsquo;s method &lt;code>Broadcast&lt;/code> to build a new stream on the method &lt;code>/orderer.AtomicBroadcast/Broadcast&lt;/code>, yields the final working client &lt;code>atomicBroadcastBroadcastClient&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>A &lt;code>BroadcastOrdererClient&lt;/code> owns multiple such &lt;code>atomicBroadcastBroadcastClient&lt;/code> which guarantees we can send the transaction to multiple &lt;code>orderer&lt;/code>s.&lt;/p>
&lt;p>When a signed transaction is broadcasted to an orderer, the orderer immediately invokes its broadcast handler that was created when the server started to process it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">bh&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">Handle&lt;/span>(&lt;span style="color:#a6e22e">srv&lt;/span> &lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">AtomicBroadcast_BroadcastServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Recv&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bh&lt;/span>.&lt;span style="color:#a6e22e">ProcessMessage&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">srv&lt;/span>.&lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To handle the transaction, the handler opens a &lt;code>broadcast loop&lt;/code> since there may be multiple rounds of message passing between the orderer and the client. Here we just focus on the key method &lt;code>ProcessMessage&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">bh&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Handler&lt;/span>) &lt;span style="color:#a6e22e">ProcessMessage&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) (&lt;span style="color:#a6e22e">resp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chdr&lt;/span>, &lt;span style="color:#a6e22e">isConfig&lt;/span>, &lt;span style="color:#a6e22e">processor&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">bh&lt;/span>.&lt;span style="color:#a6e22e">SupportRegistrar&lt;/span>.&lt;span style="color:#a6e22e">BroadcastChannelSupport&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">isConfig&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">configSeq&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">ProcessNormalMsg&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">WaitReady&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warningf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[channel: %s] Rejecting broadcast of message from %s with SERVICE_UNAVAILABLE: rejected by Consenter: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">chdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Status_SERVICE_UNAVAILABLE&lt;/span>, &lt;span style="color:#a6e22e">Info&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">Order&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>, &lt;span style="color:#a6e22e">configSeq&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warningf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[channel: %s] Rejecting broadcast of normal message from %s with SERVICE_UNAVAILABLE: rejected by Order: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">chdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Status_SERVICE_UNAVAILABLE&lt;/span>, &lt;span style="color:#a6e22e">Info&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> { &lt;span style="color:#75715e">// isConfig
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">configSeq&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">ProcessConfigUpdateMsg&lt;/span>(&lt;span style="color:#a6e22e">msg&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">WaitReady&lt;/span>(); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warningf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[channel: %s] Rejecting broadcast of message from %s with SERVICE_UNAVAILABLE: rejected by Consenter: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">chdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Status_SERVICE_UNAVAILABLE&lt;/span>, &lt;span style="color:#a6e22e">Info&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">processor&lt;/span>.&lt;span style="color:#a6e22e">Configure&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">configSeq&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Warningf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;[channel: %s] Rejecting broadcast of config message from %s with SERVICE_UNAVAILABLE: rejected by Configure: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">chdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>, &lt;span style="color:#a6e22e">addr&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Status_SERVICE_UNAVAILABLE&lt;/span>, &lt;span style="color:#a6e22e">Info&lt;/span>: &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ab&lt;/span>.&lt;span style="color:#a6e22e">BroadcastResponse&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Status_SUCCESS&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It contains several functions we should care about:&lt;/p>
&lt;ul>
&lt;li>&lt;code>BroadcastChannelSupport&lt;/code> parses the message and gives the &lt;code>ChannelHeader&lt;/code>, &lt;code>ChainSupport&lt;/code> which can deal with a &lt;code>channel&lt;/code> according to the &lt;code>channel&lt;/code>, and &lt;code>IsConfig&lt;/code> which shows whether the message is a config update and the channel resources.&lt;/li>
&lt;li>&lt;code>processor.WaitReady&lt;/code> blocks waiting for the consenter to be ready to accept new messages.&lt;/li>
&lt;li>&lt;code>processor.ProcessNormalMsg&lt;/code> process normal transaction message&lt;/li>
&lt;li>&lt;code>processor.ProcessConfigUpdateMsg&lt;/code> process config transaction message&lt;/li>
&lt;li>&lt;code>processor.Order&lt;/code> submits the transaction message consisting of &lt;code>LastValidationSeq&lt;/code>, &lt;code>Payload,&lt;/code> and &lt;code>ChannelID&lt;/code> for ordering. The message goes to the local run goroutine if the current orderer is a leader, otherwise forwarded to the actual leader via RPC. This method finally invokes &lt;code>Chain.Submit&lt;/code> .&lt;/li>
&lt;li>&lt;code>processor.Configure&lt;/code> submits the config transaction message for ordering, which works exactly the same way with &lt;code>processor.Order&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Now, let&amp;rsquo;s take a closer look at the &lt;code>ProcessNormalMsg&lt;/code>, &lt;code>ProcessConfigUpdateMsg,&lt;/code> and &lt;code>Chain.Submit&lt;/code>.&lt;/p>
&lt;h3 id="processnoramlmsg">ProcessNoramlMsg&lt;/h3>
&lt;p>The &lt;code>ProcessNormalMsg&lt;/code> is declared as a method of &lt;code>StandardChannel&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">StandardChannel&lt;/span>) &lt;span style="color:#a6e22e">ProcessNormalMsg&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>) (&lt;span style="color:#a6e22e">configSeq&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">oc&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">OrdererConfig&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Panicf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Missing orderer config&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">oc&lt;/span>.&lt;span style="color:#a6e22e">Capabilities&lt;/span>().&lt;span style="color:#a6e22e">ConsensusTypeMigration&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">oc&lt;/span>.&lt;span style="color:#a6e22e">ConsensusState&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">orderer&lt;/span>.&lt;span style="color:#a6e22e">ConsensusType_STATE_NORMAL&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ErrMaintenanceMode&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;normal transactions are rejected&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">configSeq&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">Sequence&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">filters&lt;/span>.&lt;span style="color:#a6e22e">Apply&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first thing it does is to gain the &lt;code>config Sequence&lt;/code>. In a Hyperledger Fabric network, the channel configuration includes information about the members, policies, etc. When a channel configuration is updated, a new configuration is created with a new sequence number that is incremented by one from the previous configuration sequence number. This allows the network to keep track of the latest channel configuration and ensure that all participating peers are on the same page regarding the channel state.&lt;/p>
&lt;p>The Next thing to do is filter the message using the &lt;code>filters.Apply&lt;/code>. To be filtered means the message should obey the filter&amp;rsquo;s rule such as &lt;code>MaxBytesRule&lt;/code>, &lt;code>expirationRejectRule&lt;/code>, &lt;code>EmptyRejectRule&lt;/code>, &lt;code>SigFilter&lt;/code>, etc. The filters are created at the start of the orderer server, with the initialization of a &lt;code>registrar&lt;/code>.&lt;/p>
&lt;h3 id="processconfigupdatemsg">ProcessConfigUpdateMsg&lt;/h3>
&lt;p>The &lt;code>ProcessConfigUpdateMsg&lt;/code> is also declared in the &lt;code>StandardChannel&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">StandardChannel&lt;/span>) &lt;span style="color:#a6e22e">ProcessConfigUpdateMsg&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>) (&lt;span style="color:#a6e22e">config&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>, &lt;span style="color:#a6e22e">configSeq&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">seq&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">Sequence&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">filters&lt;/span>.&lt;span style="color:#a6e22e">Apply&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config update for existing channel did not pass initial checks&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">configEnvelope&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">ProposeConfigUpdate&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessagef&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;error applying config update to existing channel &amp;#39;%s&amp;#39;&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">protoutil&lt;/span>.&lt;span style="color:#a6e22e">CreateSignedEnvelope&lt;/span>(&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">HeaderType_CONFIG&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>(), &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">support&lt;/span>.&lt;span style="color:#a6e22e">Signer&lt;/span>(), &lt;span style="color:#a6e22e">configEnvelope&lt;/span>, &lt;span style="color:#a6e22e">msgVersion&lt;/span>, &lt;span style="color:#a6e22e">epoch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">filters&lt;/span>.&lt;span style="color:#a6e22e">Apply&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config update for existing channel did not pass final checks&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">maintenanceFilter&lt;/span>.&lt;span style="color:#a6e22e">Apply&lt;/span>(&lt;span style="color:#a6e22e">config&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;config update for existing channel did not pass maintenance checks&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">config&lt;/span>, &lt;span style="color:#a6e22e">seq&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It first gets the sequence and filters the message just like &lt;code>ProcessNormalMsg&lt;/code>, then it takes in the envelope of the &lt;code>CONFIG_UPDATE&lt;/code> and produces a &lt;code>ConfigEnvelope&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">ConfigEnvelope&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Config&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Config&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Sequence&lt;/span>: &lt;span style="color:#a6e22e">vi&lt;/span>.&lt;span style="color:#a6e22e">sequence&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChannelGroup&lt;/span>: &lt;span style="color:#a6e22e">channelGroup&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LastUpdate&lt;/span>: &lt;span style="color:#a6e22e">configtx&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>configtx&lt;/code> above is the &lt;code>env&lt;/code> we passed to &lt;code>s.support.ProposeConfigUpdate&lt;/code>. This new envelope is later wrapped in the &lt;code>HeaderType_CONFIG&lt;/code> and signed to orderer.&lt;/p>
&lt;h3 id="submit">Submit&lt;/h3>
&lt;p>The &lt;code>Submit&lt;/code> is a method of &lt;code>Chain&lt;/code>, which defines a way to inject messages for ordering, however, it is not the &lt;code>blockchain&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Chain&lt;/span>) &lt;span style="color:#a6e22e">Submit&lt;/span>(&lt;span style="color:#a6e22e">req&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">orderer&lt;/span>.&lt;span style="color:#a6e22e">SubmitRequest&lt;/span>, &lt;span style="color:#a6e22e">sender&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">leadC&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">uint64&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">submitC&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">submit&lt;/span>{&lt;span style="color:#a6e22e">req&lt;/span>, &lt;span style="color:#a6e22e">leadC&lt;/span>}:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lead&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">leadC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lead&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#a6e22e">raft&lt;/span>.&lt;span style="color:#a6e22e">None&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">Metrics&lt;/span>.&lt;span style="color:#a6e22e">ProposalFailures&lt;/span>.&lt;span style="color:#a6e22e">Add&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;no Raft leader&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">lead&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">raftID&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">forwardToLeader&lt;/span>(&lt;span style="color:#a6e22e">lead&lt;/span>, &lt;span style="color:#a6e22e">req&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It sends the request to go channel &lt;code>submitC&lt;/code> and receives the current leader in the raft network.&lt;/p>
&lt;ul>
&lt;li>When &lt;code>lead==raft.None&lt;/code>, the leader is not elected yet, and the consensus service is unavailable.&lt;/li>
&lt;li>When &lt;code>lead!=c.raftID&lt;/code>, the current orderer is not the leader, so it just forwards the message to the leader instead of processing it.&lt;/li>
&lt;li>When &lt;code>lead==c.raftID&lt;/code>, the current orderer can process the message, which we will discuss in the next post.&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we explored how the client wraps the endorsements to request then sends it to the orderer, and the orderer validates the message and then processes or forwards it. Still, we haven&amp;rsquo;t stepped into the core domain of the orderer. Be patient, we will talk about it in the next post.&lt;/p></content></item><item><title>Understanding the Endorser process proposal</title><link>https://www.michaelchan.space/posts/understanding-the-endorser-process-proposal/</link><pubDate>Fri, 25 Nov 2022 19:09:20 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-endorser-process-proposal/</guid><description>&lt;p>In the previous posts, we learned how the peer and chaincode start and knew there&amp;rsquo;re multiple roles in a hyperledger fabric network. In this post, we will have new insights into the endorser. But before we do that, let&amp;rsquo;s have a global view of how the fabric run.&lt;/p></description><content>&lt;p>In the previous posts, we learned how the peer and chaincode start and knew there&amp;rsquo;re multiple roles in a hyperledger fabric network. In this post, we will have new insights into the endorser. But before we do that, let&amp;rsquo;s have a global view of how the fabric run.&lt;/p>
&lt;h2 id="the-proposal-the-endorser-and-the-order">The proposal, the endorser, and the order&lt;/h2>
&lt;p>A proposal in Hyperledger Fabric is a transaction request sent to the network for processing. It contains all the necessary information related to the transaction, including the sender&amp;rsquo;s identity, the receiver&amp;rsquo;s identity, the amount of the transaction, and any other relevant data. When a proposal is submitted, it is first verified by the endorsing peers to ensure that it is valid and meets the required criteria. Once the proposal is validated, it is sent to the ordering service for further processing.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Proposal&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Header&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=header,proto3&amp;#34; json:&amp;#34;header,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Payload&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=payload,proto3&amp;#34; json:&amp;#34;payload,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Extension&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,3,opt,name=extension,proto3&amp;#34; json:&amp;#34;extension,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The endorser in Hyperledger Fabric is responsible for endorsing the validity of a transaction proposal. Endorsers are selected by the client based on the network&amp;rsquo;s endorsement policy, which specifies the required number of endorsements required to execute a transaction. Endorsers examine the proposal and determine whether it meets the requirements specified by the endorsement policy. If the proposal meets the endorsement policy criteria, the endorser digitally signs the proposal and sends it back to the client for further processing.&lt;/p>
&lt;p>The order in Hyperledger Fabric is responsible for processing and validating endorsed transactions. The ordering service is a separate component in the network that ensures that all transactions are executed in a consistent and sequential order. The order service takes endorsed transactions from the client and creates a block containing the transactions in the correct order. Once the block is created, it is broadcasted to all the nodes in the network for validation and verification. Once the block is validated, it is added to the blockchain, and the transaction is considered complete.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> Execution Phase â Ordering Phase â Validation Phase
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââ â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Peer 1 â 1 â â â Peer 1 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â (Endorser) ââââââââââââââ â â ââââââº (Endorser) â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââ¬ââââââââââââ â â â â â 6, 7, 8 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â 2 âââââ´ââââ â âââââââââââââ â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ââââââââââââââââââââââº â 3 â â Ordering â 5 â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â clientâââââ¼âââºâ âââââ¼ââ¤
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ââââââââââââââââââââââº â â â Service â â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â 2 âââââ¬ââââ â âââââââââââââ â â â Peer 2 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââ´ââââââââââââ â â 4 â ââââââº (Endorser) â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Peer 2 ââââââââââââââ â â â â 6, 7, 8 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â (Endorser) â 1 â â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââ â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââ â â â â Peer 3 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â Peer 3 â â â ââââââº â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>â (Endorser) â â â â 6, 7, 8 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>âââââââââââââââ â â âââââââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1: Send transaction for endorsement
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2: Transaction with endorser signature and read/write set
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 3: Transaction with endorser response
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 4: Transactions packed in blocks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 5: Block of transactions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 6: VSCC &amp;amp; MVCC validation
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 7: World state updated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 8: Block appended to ledger
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-channel">The Channel&lt;/h2>
&lt;p>A Hyperledger Fabric &lt;code>channel&lt;/code> is a private âsubnetâ of communication between two or more specific network members, for the purpose of conducting private and confidential transactions. A channel is defined by members (organizations), anchor peers per member, the shared ledger, chaincode application(s) and the ordering service node(s). Each transaction on the network is executed on a channel, where each party must be authenticated and authorized to transact on that channel. Each peer that joins a channel, has its own identity given by a membership services provider (MSP), which authenticates each peer to its channel peers and services.&lt;/p>
&lt;h2 id="process-the-proposal">Process the proposal&lt;/h2>
&lt;p>As the above diagram shows, processing the proposal happens in the 2nd step, which invokes &lt;code>Endorser.ProcessProposal(ctx context.Context, signedProp *pb.SignedProposal) (*pb.ProposalResponse, error)&lt;/code> and do the following jobs:&lt;/p>
&lt;ol>
&lt;li>Validate the proposal&lt;/li>
&lt;li>Simulate the execution of the proposal&lt;/li>
&lt;li>Sign the proposal and read/write set, then return the response&lt;/li>
&lt;/ol>
&lt;h3 id="unpack-and-validate-the-proposal">Unpack and Validate the Proposal&lt;/h3>
&lt;p>Since the proposal is serialized to bytes and signed, we need first unpack the proposal and verify the certification and signature. The &lt;code>proto.Unmarshal&lt;/code> is used to deserialize the message into the &lt;code>UnpackedProposal&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">UnpackedProposal&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChannelHeader&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeInput&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Proposal&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Proposal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SignatureHeader&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">common&lt;/span>.&lt;span style="color:#a6e22e">SignatureHeader&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">SignedProposal&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">SignedProposal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ProposalHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s worth mentioning that the &lt;code>proposalHash&lt;/code> is calculated with &lt;code>sha256&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sha256&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">hdr&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">hdr&lt;/span>.&lt;span style="color:#a6e22e">SignatureHeader&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">propHash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">ppBytes&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since the transaction is preprocessed on the channel, we have to find the channel firstï¼&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Channel&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>() &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> = &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">ChannelFetcher&lt;/span>.&lt;span style="color:#a6e22e">Channel&lt;/span>(&lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelID&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">channel&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ProposalResponse&lt;/span>{&lt;span style="color:#a6e22e">Response&lt;/span>: &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span>{&lt;span style="color:#a6e22e">Status&lt;/span>: &lt;span style="color:#ae81ff">500&lt;/span>, &lt;span style="color:#a6e22e">Message&lt;/span>: &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;channel &amp;#39;%s&amp;#39; not found&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">up&lt;/span>.&lt;span style="color:#a6e22e">ChannelHeader&lt;/span>.&lt;span style="color:#a6e22e">ChannelId&lt;/span>)}}, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">channel&lt;/span> = &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Channel&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">IdentityDeserializer&lt;/span>: &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">LocalMSP&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the code shows, if the &lt;code>channelID&lt;/code> is provided in the channel header, then we use it to find the channel, else we use the local membership manager to create a default channel.&lt;/p>
&lt;p>The validation is done in the method &lt;code>Endorser.preProcess(up *UnpackedProposal, channel *Channel) error&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>Validate the channel header&amp;rsquo;s type and epoch&lt;/li>
&lt;li>Validate the signature header&amp;rsquo;s nonce and creator, then compare the &lt;code>TxID&lt;/code> with &lt;code>Sha256(nonce+creator)&lt;/code>&lt;/li>
&lt;li>Find the creator by step 2&amp;rsquo;s creator in the channel then validate it.
&lt;ol>
&lt;li>Validate the creator&amp;rsquo;s certificate chain&lt;/li>
&lt;li>Validate the creator&amp;rsquo;s organization unit&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>Verify signature with Cryptography algorithms&lt;/li>
&lt;li>Find the local transaction by &lt;code>TxId&lt;/code> provided in the channel header to avoid replay attacks.&lt;/li>
&lt;li>Check if the chaincode is a system chaincode(&lt;code>CSCC&lt;/code>, &lt;code>LSCC&lt;/code>, &lt;code>QSCC&lt;/code>), if not, ensure the proposal complies with the channel&amp;rsquo;s writers.&lt;/li>
&lt;/ol>
&lt;h3 id="simulate-the-proposal">Simulate the proposal&lt;/h3>
&lt;p>As the word &lt;code>simulate&lt;/code> implies, this part will not change the ledger. To do the simulation, We first need &lt;code>TxSimulator&lt;/code> and &lt;code>HistoryQueryExecutor&lt;/code>. (Note that &lt;code>txSim&lt;/code> acquires a shared lock(read lock) on the &lt;code>stateDB&lt;/code>, which will impact the block commits.) Then we call &lt;code>Endorser.simulateProposal&lt;/code> to get the result:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>invoke &lt;code>callChaincode&lt;/code> to call specified chaincode, which will finally invoke the &lt;code>ChaincodeSupport&lt;/code>&amp;rsquo;s method &lt;code>Invoke&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">cs&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ChaincodeSupport&lt;/span>) &lt;span style="color:#a6e22e">Invoke&lt;/span>(&lt;span style="color:#a6e22e">txParams&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ccprovider&lt;/span>.&lt;span style="color:#a6e22e">TransactionParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeInput&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ccid&lt;/span>, &lt;span style="color:#a6e22e">cctype&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">CheckInvocation&lt;/span>(&lt;span style="color:#a6e22e">txParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">WithMessage&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;invalid invocation&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">h&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">Launch&lt;/span>(&lt;span style="color:#a6e22e">ccid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">cs&lt;/span>.&lt;span style="color:#a6e22e">execute&lt;/span>(&lt;span style="color:#a6e22e">cctype&lt;/span>, &lt;span style="color:#a6e22e">txParams&lt;/span>, &lt;span style="color:#a6e22e">chaincodeName&lt;/span>, &lt;span style="color:#a6e22e">input&lt;/span>, &lt;span style="color:#a6e22e">h&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>We will first check the invocation and determines if, how, and to where that invocation should be routed. The function &lt;code>CheckInvocation&lt;/code> returns the &lt;code>chancodeID&lt;/code>, &lt;code>chaincodeType&lt;/code>, and error. If the chaincode requires initialization, the &lt;code>chaincodeType&lt;/code> will be &lt;code>ChaincodeMessage_INIT&lt;/code>, otherwise &lt;code>ChaincodeMessage_TRANSACTION&lt;/code>. Remember that we have talked about the &lt;code>chaincodeType&lt;/code> in the &lt;a href="https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-chaincode/">previous post&lt;/a>.&lt;/li>
&lt;li>We then call &lt;code>Launch()&lt;/code> to create and launch chaincode runtime, and finally call &lt;code>dockerClient.CreateContainer&lt;/code> to create a docker container.&lt;/li>
&lt;li>Once the container is created successfully, we call &lt;code>execute&lt;/code> to run the chaincode. To do that, we first construct the &lt;code>chaincodeMessage&lt;/code> with the &lt;code>chaincodeType&lt;/code>, &lt;code>payload&lt;/code>(which is the &lt;code>input&lt;/code> we unmarshaled from the proposal), &lt;code>txID&lt;/code>, &lt;code>channelID&lt;/code> and then send it to chaincode via gRPC.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>For operations deploying or upgrading user chaincode through LSCC, it is necessary to use the &lt;code>Execute()&lt;/code> method again to initialize or upgrade the user chaincode instance.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The whole simulation may involve multiple rounds of gRPC communication between the endorser and the chaincode and these communications may want to change the ledger, as we said before, the ledger should not be modified during the simulation. So We put the mediate result to the simulator&amp;rsquo;s &lt;code>rwsetBuilder&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// SetState implements method in interface `ledger.TxSimulator`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">txSimulator&lt;/span>) &lt;span style="color:#a6e22e">SetState&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkWritePrecondition&lt;/span>(&lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">rwsetBuilder&lt;/span>.&lt;span style="color:#a6e22e">AddToWriteSet&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>, &lt;span style="color:#a6e22e">value&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// if this has a key level signature policy, add it to the interest
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">checkStateMetadata&lt;/span>(&lt;span style="color:#a6e22e">ns&lt;/span>, &lt;span style="color:#a6e22e">key&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>Once the simulation is done, we can get the results via &lt;code>GetTxSimulationResults&lt;/code>.&lt;/li>
&lt;li>With the simulation results, we can build the &lt;code>chaincodeInterest&lt;/code> that the client can pass to the discovery service to get the correct endorsement policy for the chaincode.&lt;/li>
&lt;/ol>
&lt;h3 id="sign-the-endorsement">Sign the endorsement&lt;/h3>
&lt;p>We have gotten the simulation result, the chaincode&amp;rsquo;s response, the chaincode event, and chaincodeID, we need to wrap them into an endorsement response and signature. A &lt;code>ProposalResonsePayload&lt;/code> is shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ProposalResponsePayload&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ProposalHash&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,1,opt,name=proposal_hash,json=proposalHash,proto3&amp;#34; json:&amp;#34;proposal_hash,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Extension&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=extension,proto3&amp;#34; json:&amp;#34;extension,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The field &lt;code>Extension&lt;/code> is where we need to put the things in:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cAct&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeAction&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Events&lt;/span>: &lt;span style="color:#a6e22e">event&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Results&lt;/span>: &lt;span style="color:#a6e22e">result&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Response&lt;/span>: &lt;span style="color:#a6e22e">response&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeId&lt;/span>: &lt;span style="color:#a6e22e">ccid&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cActBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">proto&lt;/span>.&lt;span style="color:#a6e22e">Marshal&lt;/span>(&lt;span style="color:#a6e22e">cAct&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After that, we use &lt;code>EndorsementPlugin&lt;/code> to sign the payload:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">DefaultEndorsement&lt;/span>) &lt;span style="color:#a6e22e">Endorse&lt;/span>(&lt;span style="color:#a6e22e">prpBytes&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#a6e22e">sp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">SignedProposal&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Endorsement&lt;/span>, []&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">signer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>.&lt;span style="color:#a6e22e">SigningIdentityForRequest&lt;/span>(&lt;span style="color:#a6e22e">sp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrap&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;failed fetching signing identity&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// serialize the signing identity
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">identityBytes&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">signer&lt;/span>.&lt;span style="color:#a6e22e">Serialize&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;could not serialize the signing identity&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sign the concatenation of the proposal response and the serialized endorser identity with this endorser&amp;#39;s key
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">signature&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">signer&lt;/span>.&lt;span style="color:#a6e22e">Sign&lt;/span>(append(&lt;span style="color:#a6e22e">prpBytes&lt;/span>, &lt;span style="color:#a6e22e">identityBytes&lt;/span>&lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">Wrapf&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;could not sign the proposal response payload&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">endorsement&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Endorsement&lt;/span>{&lt;span style="color:#a6e22e">Signature&lt;/span>: &lt;span style="color:#a6e22e">signature&lt;/span>, &lt;span style="color:#a6e22e">Endorser&lt;/span>: &lt;span style="color:#a6e22e">identityBytes&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">endorsement&lt;/span>, &lt;span style="color:#a6e22e">prpBytes&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s clear the endorsement is composed of two parts: the signature of &lt;code>ProposalResponsePayload+EndorserIdentity&lt;/code> and the &lt;code>EndorserIdentity&lt;/code>.&lt;/p>
&lt;h2 id="the-proposalresponse">The ProposalResponse&lt;/h2>
&lt;p>The final &lt;code>ProposalResponse&lt;/code> returned to the client is shown below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ProposalResponse&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Version indicates message protocol version
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Version&lt;/span> &lt;span style="color:#66d9ef">int32&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;varint,1,opt,name=version,proto3&amp;#34; json:&amp;#34;version,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Timestamp is the time that the message
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// was created as defined by the sender
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">timestamppb&lt;/span>.&lt;span style="color:#a6e22e">Timestamp&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,2,opt,name=timestamp,proto3&amp;#34; json:&amp;#34;timestamp,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// A response message indicating whether the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// endorsement of the action was successful
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Response&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Response&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,4,opt,name=response,proto3&amp;#34; json:&amp;#34;response,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The payload of response. It is the bytes of ProposalResponsePayload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Payload&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,5,opt,name=payload,proto3&amp;#34; json:&amp;#34;payload,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The endorsement of the proposal, basically
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the endorser&amp;#39;s signature over the payload
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Endorsement&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">Endorsement&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,6,opt,name=endorsement,proto3&amp;#34; json:&amp;#34;endorsement,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// The chaincode interest derived from simulating the proposal.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">Interest&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">ChaincodeInterest&lt;/span> &lt;span style="color:#e6db74">`protobuf:&amp;#34;bytes,7,opt,name=interest,proto3&amp;#34; json:&amp;#34;interest,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Understanding the Start Process of Hyperledger Peer</title><link>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-peer/</link><pubDate>Sat, 05 Nov 2022 19:09:20 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-peer/</guid><description>&lt;p>In the last post, we explored the start process of the chaincode side container, which is simple: starting a gRPC stream and handling the message. However, the peer node&amp;rsquo;s start process is somehow complicated, which involves more components and data structures.&lt;/p></description><content>&lt;p>In the last post, we explored the start process of the chaincode side container, which is simple: starting a gRPC stream and handling the message. However, the peer node&amp;rsquo;s start process is somehow complicated, which involves more components and data structures.&lt;/p>
&lt;h2 id="launch-a-peer-node">Launch a peer node&lt;/h2>
&lt;p>It&amp;rsquo;s easy to launch a peer node using the command: &lt;code>peer node start&lt;/code>, which will finally invoke the function &lt;code>serve&lt;/code>. The &lt;code>serve&lt;/code> function, however, is not well readable and contains lots of start processes of different servers and data structures:&lt;/p>
&lt;ul>
&lt;li>System Server&lt;/li>
&lt;li>LedgerMgr&lt;/li>
&lt;li>gRPC Server&lt;/li>
&lt;li>Gossip Server&lt;/li>
&lt;li>Chaincode Support Server&lt;/li>
&lt;li>Deliver Server&lt;/li>
&lt;li>Chaincode Custodian Server&lt;/li>
&lt;li>Snapshot Server&lt;/li>
&lt;li>Gateway Server&lt;/li>
&lt;/ul>
&lt;h2 id="system-server">System Server&lt;/h2>
&lt;p>The &lt;code>System Server&lt;/code> is a simple HTTP server, initialized in the &lt;code>serve&lt;/code> function:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">opsSystem&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">newOperationsSystem&lt;/span>(&lt;span style="color:#a6e22e">coreConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">opsSystem&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the function name &lt;code>newOperationsSystem&lt;/code> indicates, the &lt;code>System server&lt;/code> works as a system monitor, which provides&lt;/p>
&lt;ul>
&lt;li>Health Check Handler, which is used to check the health status of the peer node.&lt;/li>
&lt;li>Logging Spec Handler, which is used to change the log level of the peer node.&lt;/li>
&lt;li>Metrics Provider, can be implemented by different providers, such as &lt;code>Prometheus&lt;/code> and &lt;code>StatsD&lt;/code>, via which we can get lots of metrics of the peer node.&lt;/li>
&lt;li>Version Info Handler, which is used to get the version information of the peer node.&lt;/li>
&lt;/ul>
&lt;h2 id="ledgermgr">LedgerMgr&lt;/h2>
&lt;p>A &lt;code>LedgerMgr&lt;/code> is a data structure that manages the lifecycle of the ledger, it&amp;rsquo;s data structure is defined as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">LedgerMgr&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">creationLock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">joinBySnapshotStatus&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">JoinBySnapshotStatus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">openedLedgers&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#a6e22e">ledger&lt;/span>.&lt;span style="color:#a6e22e">PeerLedger&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ledgerProvider&lt;/span> &lt;span style="color:#a6e22e">ledger&lt;/span>.&lt;span style="color:#a6e22e">PeerLedgerProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ebMetadataProvider&lt;/span> &lt;span style="color:#a6e22e">MetadataProvider&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the &lt;code>serve&lt;/code> function, the &lt;code>LedgerMgr&lt;/code> is initialized as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">peerInstance&lt;/span>.&lt;span style="color:#a6e22e">LedgerMgr&lt;/span> = &lt;span style="color:#a6e22e">ledgermgmt&lt;/span>.&lt;span style="color:#a6e22e">NewLedgerMgr&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">ledgermgmt&lt;/span>.&lt;span style="color:#a6e22e">Initializer&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, we pass an &lt;code>initializer&lt;/code> to the &lt;code>NewLedgerMgr&lt;/code> function, which will invoke &lt;code>kv.NewProvider&lt;/code> to take a series of initialization steps:&lt;/p>
&lt;ul>
&lt;li>initialize ledger ID Store to create a database for ledger IDs&lt;/li>
&lt;li>initialize block store to create a database for blocks&lt;/li>
&lt;li>initialize private data store to create a database for private data&lt;/li>
&lt;li>initialize history DB to create a database store for state history&lt;/li>
&lt;li>initialize config history manager to create a database store for config history&lt;/li>
&lt;li>initialize collElgNotifier to listen to the chaincode events&lt;/li>
&lt;li>initialize state listeners which include &lt;code>collElgNotifier&lt;/code> and &lt;code>configHistoryMgr&lt;/code>&lt;/li>
&lt;li>initialize state DB to create a database store for the state&lt;/li>
&lt;li>initialize ledger statistics to statistics the ledger block processing time, the block storage commit time, the state DB commit time and the transaction count&lt;/li>
&lt;li>scans for and deletes any ledger with a status of &lt;code>UNDER_CONSTRUCTION&lt;/code> or &lt;code>UNDER_DELETION&lt;/code>&lt;/li>
&lt;li>initialize snapshot directory to create a directory for the snapshot&lt;/li>
&lt;/ul>
&lt;h2 id="grpc-server">gRPC Server&lt;/h2>
&lt;p>The &lt;code>gRPC Server&lt;/code> here is a common server that can be wrapped by different services, such as &lt;code>DeliverServer&lt;/code>, &lt;code>SnapshotServer&lt;/code>. The &lt;code>gRPC Server&lt;/code> is initialized in the &lt;code>serve&lt;/code> function as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">peerServer&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">comm&lt;/span>.&lt;span style="color:#a6e22e">NewGRPCServer&lt;/span>(&lt;span style="color:#a6e22e">listenAddr&lt;/span>, &lt;span style="color:#a6e22e">serverConfig&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The server config contains the options such as &lt;code>MaxRecvMsgSize&lt;/code>, &lt;code>MaxSendMsgSize&lt;/code>, &lt;code>StreamInterceptors&lt;/code>, &lt;code>UnaryInterceptors&lt;/code>, etc.&lt;/p>
&lt;h2 id="gossip-server">Gossip Server&lt;/h2>
&lt;p>The &lt;code>Gossip Server&lt;/code> of a peer node is used to gossip the blocks and transactions to other peer nodes which based on the &lt;code>gossip&lt;/code> protocol. The &lt;code>Gossip Server&lt;/code> is initialized by &lt;code>initGossipService&lt;/code> function, which does the following steps:&lt;/p>
&lt;ul>
&lt;li>determine if TLS is enabled, if so, load and store the server&amp;rsquo;s and client&amp;rsquo;s TLS certificates&lt;/li>
&lt;li>invoke &lt;code>NewMCS&lt;/code> to create a message crypto service, which is used to authenticate the identity of the peer node and verify the signature of the message&lt;/li>
&lt;li>invoke &lt;code>NewSecurityAdvisor&lt;/code> to create a security advisor, which is an external auxiliary object that provides security and identity-related capabilities&lt;/li>
&lt;li>Wrap the &lt;code>gossipService&lt;/code> with &lt;code>gPRC Server&lt;/code> and the other components, such as &lt;code>MCS&lt;/code>, &lt;code>SecurityAdvisor&lt;/code>, etc.&lt;/li>
&lt;/ul>
&lt;h2 id="chaincode-support-server">Chaincode Support Server&lt;/h2>
&lt;p>The &lt;code>Chaincode Support Server&lt;/code> is used to handle chaincode-related requests, such as &lt;code>Install&lt;/code>, &lt;code>Invoke&lt;/code>, &lt;code>Query&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ca&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tlsgen&lt;/span>.&lt;span style="color:#a6e22e">NewCA&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ccSrv&lt;/span>, &lt;span style="color:#a6e22e">ccEndpoint&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">createChaincodeServer&lt;/span>(&lt;span style="color:#a6e22e">coreConfig&lt;/span>, &lt;span style="color:#a6e22e">ca&lt;/span>, &lt;span style="color:#a6e22e">peerHost&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chaincodeSupport&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincode&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeSupport&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ccSupSrv&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeSupportServer&lt;/span>(&lt;span style="color:#a6e22e">chaincodeSupport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterChaincodeSupportServer&lt;/span>(&lt;span style="color:#a6e22e">ccSrv&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">ccSupSrv&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">ccSrv&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>()
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As the above code shows, the &lt;code>ChaincodeSupportServer&lt;/code> starts with the steps:&lt;/p>
&lt;ul>
&lt;li>Invoke &lt;code>NewCA&lt;/code> to create a self-signed CA for chaincode service&lt;/li>
&lt;li>Invoke &lt;code>createChaincodeServer&lt;/code> to create a listener(which is a gRPC server created with &lt;code>comm.NewGRPCServer&lt;/code>) using &lt;code>peer.chaincodeListneAddress&lt;/code>&lt;/li>
&lt;li>cast the &lt;code>chaincodeSupport&lt;/code> to &lt;code>pb.ChiancodeSupportServer&lt;/code> interface which must own the method (or API) &lt;code>Register(ChaincodeSupport_RegisterServer) error&lt;/code>&lt;/li>
&lt;li>Register the casted server API(&lt;code>ccSupSrv&lt;/code>) to the gRPC server(&lt;code>ccSrv.Server()&lt;/code>)&lt;/li>
&lt;li>Start gRPC server&lt;/li>
&lt;/ul>
&lt;h2 id="deliver-server">Deliver Server&lt;/h2>
&lt;p>The &lt;code>Deliver server&lt;/code> is primarily used for the delivery and filter of the blocks:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DeliverServer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Deliver&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverFiltered&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverFilteredServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverWithPrivateData&lt;/span>(&lt;span style="color:#a6e22e">Deliver_DeliverWithPrivateDataServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As same as the &lt;code>Chaincode support Server&lt;/code>, we first create the instance of &lt;code>Deliver Server&lt;/code>, then register it to the gRPC server (the peer server, as mentioned above):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">mutualTLS&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">serverConfig&lt;/span>.&lt;span style="color:#a6e22e">SecOpts&lt;/span>.&lt;span style="color:#a6e22e">UseTLS&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">serverConfig&lt;/span>.&lt;span style="color:#a6e22e">SecOpts&lt;/span>.&lt;span style="color:#a6e22e">RequireClientCert&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">policyCheckerProvider&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">resourceName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">PolicyCheckerFunc&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">env&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cb&lt;/span>.&lt;span style="color:#a6e22e">Envelope&lt;/span>, &lt;span style="color:#a6e22e">channelID&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">aclProvider&lt;/span>.&lt;span style="color:#a6e22e">CheckACL&lt;/span>(&lt;span style="color:#a6e22e">resourceName&lt;/span>, &lt;span style="color:#a6e22e">channelID&lt;/span>, &lt;span style="color:#a6e22e">env&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">metrics&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">NewMetrics&lt;/span>(&lt;span style="color:#a6e22e">metricsProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">abServer&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">DeliverServer&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DeliverHandler&lt;/span>: &lt;span style="color:#a6e22e">deliver&lt;/span>.&lt;span style="color:#a6e22e">NewHandler&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">DeliverChainManager&lt;/span>{&lt;span style="color:#a6e22e">Peer&lt;/span>: &lt;span style="color:#a6e22e">peerInstance&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">coreConfig&lt;/span>.&lt;span style="color:#a6e22e">AuthenticationTimeWindow&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutualTLS&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">metrics&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PolicyCheckerProvider&lt;/span>: &lt;span style="color:#a6e22e">policyCheckerProvider&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterDeliverServer&lt;/span>(&lt;span style="color:#a6e22e">peerServer&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">abServer&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The steps are shown from the above:&lt;/p>
&lt;ul>
&lt;li>Acquire the resource check &lt;code>policyCheckerProvider&lt;/code>, which invokes &lt;code>CheckACL&lt;/code> to check ACL (Access Control Lists) for the given channel(&lt;code>channelID&lt;/code>) using the &lt;code>env(the 1st parameter)&lt;/code>. As for the resources to be checked, the deliver focuses on the &lt;code>Event_FilteredBlock&lt;/code> and &lt;code>Event_Block&lt;/code>&lt;/li>
&lt;li>Create a handler to handle the events, which will parse the event, check the ACL, then delivery the blocks.&lt;/li>
&lt;li>Register the &lt;code>abServer&lt;/code> to the gRPC server.&lt;/li>
&lt;/ul>
&lt;h2 id="deploy-system-chaincode">Deploy System Chaincode&lt;/h2>
&lt;blockquote>
&lt;p>The System chaincodes are specialized chaincodes that run as part of the peer process as opposed to user chaincodes that run in separate docker containers. Examples of System Chaincodes include QSCC (Query System Chaincode) for ledger and other Fabric-related queries, CSCC (Configuration System Chaincode) which helps regulate access control, and LSCC (Lifecycle System Chaincode). Unlike a user chaincode, a system chaincode is not installed and instantiated using proposals from SDKs or CLI. It is registered and deployed by the peer at start-up.&lt;/p>
&lt;p>&lt;a href="https://hyperledger-fabric.readthedocs.io/en/release-1.3/systemchaincode.html">https://hyperledger-fabric.readthedocs.io/en/release-1.3/systemchaincode.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>The following code shows how the system chaincodes are deployed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// deploy system chaincodes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> []&lt;span style="color:#a6e22e">scc&lt;/span>.&lt;span style="color:#a6e22e">SelfDescribingSysCC&lt;/span>{&lt;span style="color:#a6e22e">lsccInst&lt;/span>, &lt;span style="color:#a6e22e">csccInst&lt;/span>, &lt;span style="color:#a6e22e">qsccInst&lt;/span>, &lt;span style="color:#a6e22e">lifecycleSCC&lt;/span>} {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">enabled&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">chaincodeConfig&lt;/span>.&lt;span style="color:#a6e22e">SCCAllowlist&lt;/span>[&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>()]; !&lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">||&lt;/span> !&lt;span style="color:#a6e22e">enabled&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Infof&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;not deploying chaincode %s as it is not enabled&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">scc&lt;/span>.&lt;span style="color:#a6e22e">DeploySysCC&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span>, &lt;span style="color:#a6e22e">chaincodeSupport&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function &lt;code>DeploySysCC&lt;/code> is finally invoked, in which the chaincode starts as we talked about &lt;a href="posts/understanding-the-start-process-of-hyperledger-chaincode/">before&lt;/a>. The difference is &lt;code>shim.StartInProc&lt;/code> is invoked instead of &lt;code>shim.Start&lt;/code>.&lt;/p>
&lt;h2 id="chaincode-custodian-server">Chaincode Custodian Server&lt;/h2>
&lt;p>The &lt;code>Chaincode Custodian&lt;/code> is responsible for enqueuing builds and launches of chaincodes as they become available and stops when chaincodes are no longer referenced by an active chaincode definition.&lt;/p>
&lt;p>The custodian follows the &lt;code>Producer-Consumer&lt;/code> pattern, where the requests to manage the chaincode lifecycle are added to a queue (by the Producer), and the Consumer (Custodian) retrieves and processes them.&lt;/p>
&lt;h2 id="snapshot-server">Snapshot Server&lt;/h2>
&lt;p>The &lt;code>Snapshot&lt;/code> is introduced in &lt;code>Fabric v2.3&lt;/code>, which gives us an alternative way to join new peers into a fabric network. The details can be found &lt;a href="https://hyperledger-fabric.readthedocs.io/en/latest/peer_ledger_snapshot.html">here&lt;/a>. Just like the &lt;code>Deliver&lt;/code>, we just need to create a snapshot server instance, and attach it to the peer gRPC server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">snapshotSvc&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">snapshotgrpc&lt;/span>.&lt;span style="color:#a6e22e">SnapshotService&lt;/span>{&lt;span style="color:#a6e22e">LedgerGetter&lt;/span>: &lt;span style="color:#a6e22e">peerInstance&lt;/span>, &lt;span style="color:#a6e22e">ACLProvider&lt;/span>: &lt;span style="color:#a6e22e">aclProvider&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">RegisterSnapshotServer&lt;/span>(&lt;span style="color:#a6e22e">peerServer&lt;/span>.&lt;span style="color:#a6e22e">Server&lt;/span>(), &lt;span style="color:#a6e22e">snapshotSvc&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gateway-server">Gateway Server&lt;/h2>
&lt;p>The &lt;code>Gateway&lt;/code> is introduced in &lt;code>Fabric v2.4&lt;/code>, which provides a simplified, minimal API for submitting transactions to a Fabric network:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">GatewayServer&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Endorse&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EndorseRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EndorseResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Submit&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SubmitRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SubmitResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CommitStatus&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SignedCommitStatusRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">CommitStatusResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Evaluate&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EvaluateRequest&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">EvaluateResponse&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ChaincodeEvents&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">SignedChaincodeEventsRequest&lt;/span>, &lt;span style="color:#a6e22e">Gateway_ChaincodeEventsServer&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The details can be found &lt;a href="https://hyperledger-fabric.readthedocs.io/en/latest/gateway.html">here&lt;/a>. Also, the gateway server is registered to the peer gRPC server in the same way same as the snapshot and deliver.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, launching a Hyperledger Fabric peer node involves initializing multiple servers and data structures such as the System Server, LedgerMgr, gRPC Server, Gossip Server, Chaincode Support Server, Deliver Server, Chaincode Custodian Server, Snapshot Server, Gateway Server, etc. While this post provides a high-level overview of these components, much more detail is required to truly understand how they work together to form a robust and secure blockchain network. In future discussions, we will delve deeper into each of these elements and explore their functions and interactions.&lt;/p></content></item><item><title>Understanding the Start Process of Hyperledger Chaincode</title><link>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-chaincode/</link><pubDate>Mon, 24 Oct 2022 22:39:40 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-the-start-process-of-hyperledger-chaincode/</guid><description>&lt;p>The topic at hand is &lt;code>User Chaincode (UCC)&lt;/code>, an essential component for application developers in the realm of blockchain technology. It provides the logic necessary to process states based on a distributed ledger, enabling developers to create complex applications.&lt;/p></description><content>&lt;p>The topic at hand is &lt;code>User Chaincode (UCC)&lt;/code>, an essential component for application developers in the realm of blockchain technology. It provides the logic necessary to process states based on a distributed ledger, enabling developers to create complex applications.&lt;/p>
&lt;p>In the context of Hyperledger Fabric, Chaincode is typically executed within Docker containers. Peers utilize the Docker API to create and launch Chaincode containers. Once a Chaincode container is up and running, it establishes a bi-directional &lt;code>gRPC &lt;/code> connection with the Peer, enabling communication via the exchange of ChaincodeMessages. To initiate requests to the Peer, the Chaincode container utilizes the interface provided by the &lt;code>shim&lt;/code> package.&lt;/p>
&lt;h2 id="the-typical-structure-of-chaincode">The typical structure of chaincode&lt;/h2>
&lt;p>The typical structure of the chaincode is presented below. Users only need to focus on the implementation of the &lt;code>Init()&lt;/code> and &lt;code>Invoke()&lt;/code> functions and use the &lt;code>shim.ChaincodeStubInterface&lt;/code> structure in them to implement the interaction logic with the ledger.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">MyChaincode&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>) &lt;span style="color:#a6e22e">Init&lt;/span>(&lt;span style="color:#a6e22e">stub&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeStubInterface&lt;/span>) &lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Success&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">d&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>) &lt;span style="color:#a6e22e">Invoke&lt;/span>(&lt;span style="color:#a6e22e">stub&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeStubInterface&lt;/span>) &lt;span style="color:#a6e22e">peer&lt;/span>.&lt;span style="color:#a6e22e">Response&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Success&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">shim&lt;/span>.&lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">MyChaincode&lt;/span>{})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-start-process">The start process&lt;/h2>
&lt;p>In the &lt;code>main&lt;/code> function we called the &lt;code>shim.Start&lt;/code> to start a chaincode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">Start&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#a6e22e">Chaincode&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chaincodename&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;CORE_CHAINCODE_ID_NAME&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">chaincodename&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">errors&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&amp;#39;CORE_CHAINCODE_ID_NAME&amp;#39; must be set&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">streamGetter&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">streamGetter&lt;/span> = &lt;span style="color:#a6e22e">userChaincodeStreamGetter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">streamGetter&lt;/span>(&lt;span style="color:#a6e22e">chaincodename&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">chaincodeAsClientChat&lt;/span>(&lt;span style="color:#a6e22e">chaincodename&lt;/span>, &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">cc&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The function first retrieves the value of the &lt;code>CORE_CHAINCODE_ID_NAME&lt;/code> in order to get a &lt;code>stream&lt;/code>, the implementation of the interface &lt;code>ClientStream&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ClientStream&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">CloseSend&lt;/span>() &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where &lt;code>PeerChaincodeStream&lt;/code> is the common stream interface for peer-chaincode communication(send &amp;amp; receive chaincode message ):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Send&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>) &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Recv&lt;/span>() (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above stream interface is default implemented with &lt;code>gRPC&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">conn&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">NewClientConn&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">peerAddress&lt;/span>, &lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">TLS&lt;/span>, &lt;span style="color:#a6e22e">conf&lt;/span>.&lt;span style="color:#a6e22e">KaOpts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">internal&lt;/span>.&lt;span style="color:#a6e22e">NewRegisterClient&lt;/span>(&lt;span style="color:#a6e22e">conn&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We first establish a gRPC connection to the peer given the &lt;code>peerAddress&lt;/code>, then we create a new stream for the client side:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">NewChaincodeSupportClient&lt;/span>(&lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">ClientConn&lt;/span>) &lt;span style="color:#a6e22e">ChaincodeSupportClient&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportClient&lt;/span>{&lt;span style="color:#a6e22e">cc&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">c&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportClient&lt;/span>) &lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">...&lt;/span>&lt;span style="color:#a6e22e">grpc&lt;/span>.&lt;span style="color:#a6e22e">CallOption&lt;/span>) (&lt;span style="color:#a6e22e">ChaincodeSupport_RegisterClient&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">stream&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">cc&lt;/span>.&lt;span style="color:#a6e22e">NewStream&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">_ChaincodeSupport_serviceDesc&lt;/span>.&lt;span style="color:#a6e22e">Streams&lt;/span>[&lt;span style="color:#ae81ff">0&lt;/span>], &lt;span style="color:#e6db74">&amp;#34;/protos.ChaincodeSupport/Register&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">chaincodeSupportRegisterClient&lt;/span>{&lt;span style="color:#a6e22e">stream&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So here we can say that the stream is actually a streaming rpc.&lt;/p>
&lt;h3 id="the-chaincode-side-handler">The chaincode side handler&lt;/h3>
&lt;p>As what we will do next in web programming, we get conn via dialing to a server or listening to the port, we need a handler to process the data we accept from conn. We wrap the &lt;code>stream&lt;/code> and &lt;code>chaincode&lt;/code> into the &lt;code>handler&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Handler&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// serialLock is used to prevent concurrent calls to Send on the
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// PeerChaincodeStream. This is required by gRPC.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">serialLock&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// chatStream is the client used to access the chaincode support server on
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the peer.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">chatStream&lt;/span> &lt;span style="color:#a6e22e">PeerChaincodeStream&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// cc is the chaincode associated with this handler.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">cc&lt;/span> &lt;span style="color:#a6e22e">Chaincode&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// state holds the current state of this handler.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Multiple queries (and one transaction) with different txids can be executing in parallel for this chaincode
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// responseChannels is the channel on which responses are communicated by the shim to the chaincodeStub.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// need lock to protect chaincode from attempting
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// concurrent requests to the peer
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">responseChannelsMutex&lt;/span> &lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">Mutex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">responseChannels&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#a6e22e">pb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After being initialized, the handler sends the first message to the peer to register the chaincode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">handler&lt;/span>.&lt;span style="color:#a6e22e">serialSend&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">peerpb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage&lt;/span>{&lt;span style="color:#a6e22e">Type&lt;/span>: &lt;span style="color:#a6e22e">peerpb&lt;/span>.&lt;span style="color:#a6e22e">ChaincodeMessage_REGISTER&lt;/span>, &lt;span style="color:#a6e22e">Payload&lt;/span>: &lt;span style="color:#a6e22e">payload&lt;/span>}); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;error sending chaincode REGISTER: %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon successful registration, the chaincode starts a message processing loop, waiting to receive messages from the peer and messages about its own state transition.&lt;/p>
&lt;p>The chaincode and the peer use the &lt;code>FSM(Finite State Machine)&lt;/code> to complete a series of response operations to messages:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>When the peer receives a &lt;code>ChaincodeMessage_REGISTER&lt;/code> message from the chaincode container, it registers the message to a local Handler structure and returns a &lt;code>ChaincodeMessage_REGISTERED&lt;/code> message to the Chaincode container. The peer then updates its status to &lt;code>established&lt;/code> and sends a &lt;code>ChaincodeMessage_READY&lt;/code> message to the chaincode side, updating its status to &lt;code>ready&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The chaincode side receives the &lt;code>ChaincodeMessage_REGISTERED&lt;/code> message and updates its status from &lt;code>created&lt;/code> to &lt;code>established&lt;/code>. Upon receiving the &lt;code>ChaincodeMessage_READY&lt;/code> message, it updates its status to &amp;lsquo;ready&amp;rsquo;.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The peer sends a &lt;code>ChaincodeMessage_INIT&lt;/code> message to the Chaincode container to trigger chaincode initialization operations.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the chaincode container receives the &lt;code>ChaincodeMessage_INIT&lt;/code> message, it initializes the required &lt;code>ChaincodeStub&lt;/code> structure and calls the &lt;code>Init()&lt;/code> method in the chaincode code. After successful initialization, the chaincode container sends a &lt;code>ChaincodeMessage_COMPLETED&lt;/code> message to the peer, indicating that it is ready to be invoked.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the chaincode is invoked, the peer sends a &lt;code>ChaincodeMessage_TRANSACTION&lt;/code> message to the Chaincode.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upon receiving this message, the Chaincode calls the &lt;code>Invoke()&lt;/code> method and sends messages, and based on the logic implemented by the user in the Invoke method, it can send messages such as&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_HISTORY_FOR_KEY&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_QUERY_RESULT&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_STATE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_GET_STATE_BY_RANGE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_QUERY_STATE_CLOSE&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_QUERY_STATE_NEXT&lt;/code>,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ChaincodeMessage_INVOKE_CHAINCODE&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>to the peer side. The peer processes these messages and responds with a &lt;code>ChaincodeMessage_RESPONSE&lt;/code> message. Finally, the chaincode replies with a &lt;code>ChaincodeMessage_COMPLETE&lt;/code> message to the Peer to indicate the completion of the call.&lt;/p>
&lt;ul>
&lt;li>During this process, the peer and chaincode sides periodically send &lt;code>ChaincodeMessage_KEEPALIVE&lt;/code> messages to each other to ensure that they remain connected.&lt;/li>
&lt;/ul>
&lt;p>Overall, this system enables communication between the chaincode and the peer using a set of standardized messages and a well-defined protocol, ensuring efficient and reliable interaction.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>In this post, we explored the starting process of the hyperledger chaincode side container. We learned that this process primarily involves establishing a gRPC connection (though other methods like lib-p2p can also be used) with the peer side, and then starting a message handler to process incoming messages. By understanding the chaincode startup process, we gain a deeper understanding of how hyperledger fabric works, which can help us develop more efficient and effective blockchain applications.&lt;/p></content></item><item><title>Quick Sort Elegant Implementation</title><link>https://www.michaelchan.space/posts/quick-sort-elegent-implementation/</link><pubDate>Mon, 27 Jul 2020 19:05:30 +0800</pubDate><guid>https://www.michaelchan.space/posts/quick-sort-elegent-implementation/</guid><description>This is a code snippet of my implementation of quicksort.
func QuickSort(s Sortable) { quickSort(s, 0, s.Len()-1) } func quickSort(s Sortable, l, r int) { if l &amp;lt; r { p := partition(s, l, r) quickSort(s, l, p-1) quickSort(s, p+1, r) } } func partition(s Sortable, l, r int) int { randomIdx := l + rand.Intn(r-l+1) s.Swap(l, randomIdx) i, j := l+1, r for { for i &amp;lt;= j &amp;amp;&amp;amp; s.</description><content>&lt;p>This is a code snippet of my implementation of quicksort.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">QuickSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>()&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">r&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">partition&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">quickSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">partition&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">randomIdx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">rand&lt;/span>.&lt;span style="color:#a6e22e">Intn&lt;/span>(&lt;span style="color:#a6e22e">r&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">l&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">randomIdx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">l&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#a6e22e">r&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> !&lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">j&lt;/span>, &lt;span style="color:#a6e22e">l&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;gt; &lt;span style="color:#a6e22e">j&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">l&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>In-Place Merge Sort Algorithm</title><link>https://www.michaelchan.space/posts/in-place-merge-sort-algorithm/</link><pubDate>Fri, 24 Apr 2020 23:22:15 +0800</pubDate><guid>https://www.michaelchan.space/posts/in-place-merge-sort-algorithm/</guid><description>&lt;p>Merge sort is a popular sorting algorithm that has an average-case time complexity of O(n log n). The algorithm works by dividing the input array into two halves, sorting them recursively, and then merging them back together. However, the standard merge sort algorithm requires extra memory to hold the two sub-arrays during the merge step, which can be a bottleneck for large arrays. In contrast, in-place merge sort is a variant of the merge sort algorithm that sorts the array in place, using no extra memory.&lt;/p>
&lt;p>In this blog post, we&amp;rsquo;ll explore the in-place merge sort algorithm and how it works.&lt;/p></description><content>&lt;p>Merge sort is a popular sorting algorithm that has an average-case time complexity of O(n log n). The algorithm works by dividing the input array into two halves, sorting them recursively, and then merging them back together. However, the standard merge sort algorithm requires extra memory to hold the two sub-arrays during the merge step, which can be a bottleneck for large arrays. In contrast, in-place merge sort is a variant of the merge sort algorithm that sorts the array in place, using no extra memory.&lt;/p>
&lt;p>In this blog post, we&amp;rsquo;ll explore the in-place merge sort algorithm and how it works.&lt;/p>
&lt;h2 id="overview-of-merge-sort">Overview of Merge Sort&lt;/h2>
&lt;p>Before diving into in-place merge sort, let&amp;rsquo;s briefly review the standard merge sort algorithm. The basic idea of merge sort is to divide the input array into two halves, sort them recursively, and then merge them back together. Here&amp;rsquo;s the Golang code for merge sort:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">arr&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">arr&lt;/span>) &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">arr&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> len(&lt;span style="color:#a6e22e">arr&lt;/span>) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">left&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">arr&lt;/span>[:&lt;span style="color:#a6e22e">mid&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">right&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">arr&lt;/span>[&lt;span style="color:#a6e22e">mid&lt;/span>:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">left&lt;/span> = &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">left&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">right&lt;/span> = &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">left&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">left&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#a6e22e">right&lt;/span> []&lt;span style="color:#66d9ef">int&lt;/span>) []&lt;span style="color:#66d9ef">int&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merged&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">int&lt;/span>, len(&lt;span style="color:#a6e22e">left&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">right&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span>, &lt;span style="color:#a6e22e">k&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">left&lt;/span>) &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">right&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">left&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>] &amp;lt; &lt;span style="color:#a6e22e">right&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>] {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merged&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">left&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merged&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">right&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">left&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merged&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">left&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">j&lt;/span> &amp;lt; len(&lt;span style="color:#a6e22e">right&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merged&lt;/span>[&lt;span style="color:#a6e22e">k&lt;/span>] = &lt;span style="color:#a6e22e">right&lt;/span>[&lt;span style="color:#a6e22e">j&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">k&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">merged&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above code, the &lt;code>mergeSort()&lt;/code> function takes an array &lt;code>arr&lt;/code> and sorts it in ascending order using the merge sort algorithm. The base case is when the length of &lt;code>arr&lt;/code> is 1 or less, which is already sorted. Otherwise, the function divides &lt;code>arr&lt;/code> into two halves, &lt;code>left&lt;/code> and &lt;code>right&lt;/code>, and sorts each half recursively using &lt;code>mergeSort()&lt;/code>. Once the two halves are sorted, the function merges them back together into a single sorted array using the &lt;code>merge()&lt;/code> function. The &lt;code>merge()&lt;/code> function takes two arrays, &lt;code>left&lt;/code> and &lt;code>right&lt;/code>, and returns a merged array containing all &lt;code>left&lt;/code> and &lt;code>right&lt;/code> elements, sorted in ascending order.&lt;/p>
&lt;h2 id="in-place-merge-sort">In-Place Merge Sort&lt;/h2>
&lt;p>In-place merge sort is a variant of the merge sort algorithm that sorts the array in place, without using any extra memory. The key idea is to merge the two halves of the array by swapping elements in the original array, rather than creating a new array to hold the merged result. This is accomplished by using a divide-and-conquer approach, similar to the standard merge sort algorithm.&lt;/p>
&lt;p>Here&amp;rsquo;s the pseudocode for in-place merge sort:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Len&lt;/span>() &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">MergeSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Len&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// merge_sort sort s[start, end) in ascending order
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">end&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">end&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">start&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span>, &lt;span style="color:#a6e22e">mid&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mergeSort&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">mid&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">start&lt;/span>, &lt;span style="color:#a6e22e">mid&lt;/span>, &lt;span style="color:#a6e22e">end&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ln&lt;/span>, &lt;span style="color:#a6e22e">rn&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">rn&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">rn&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#a6e22e">rn&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span> = &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">rn&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// find lowest idx such that s[idx] &amp;gt;= s[q]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if not found, then idx = m
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">j&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">mid&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">j&lt;/span> = &lt;span style="color:#a6e22e">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> = &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">ln&lt;/span>&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span>, &lt;span style="color:#a6e22e">j&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// find highest idx such that s[idx-1] &amp;lt; s[p]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if not found. then idx = m
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">j&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">+&lt;/span> (&lt;span style="color:#a6e22e">j&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#a6e22e">i&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Less&lt;/span>(&lt;span style="color:#a6e22e">mid&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">i&lt;/span> = &lt;span style="color:#a6e22e">mid&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">j&lt;/span> = &lt;span style="color:#a6e22e">mid&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">q&lt;/span> = &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sort s[p, q) by rotatation
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if p == m or q == m then rotate twice, which means nothing change
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rotate&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">m&lt;/span> = &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">merge&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">rotate&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">m&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#a6e22e">q&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// reverse [a, b)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">reverse&lt;/span>(&lt;span style="color:#a6e22e">s&lt;/span> &lt;span style="color:#a6e22e">Sortable&lt;/span>, &lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">s&lt;/span>.&lt;span style="color:#a6e22e">Swap&lt;/span>(&lt;span style="color:#a6e22e">a&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">a&lt;/span>&lt;span style="color:#f92672">++&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>&lt;span style="color:#f92672">--&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>merge&lt;/code> function is the core of the in-place merge sort algorithm. It takes as input the &lt;code>Sortable&lt;/code> slice to be sorted, the starting index &lt;code>a&lt;/code> of the left subarray, the midpoint index &lt;code>m&lt;/code> that divides the left and right subarrays, and the ending index &lt;code>b&lt;/code> of the right subarray.&lt;/p>
&lt;p>The function first calculates the sizes of the two subarrays as &lt;code>ln = m - a&lt;/code> and &lt;code>rn = b - m&lt;/code>. If either subarray has size zero, then there is nothing to do, so the function simply returns.&lt;/p>
&lt;p>If both subarrays have size one, the function compares the elements at the two indices &lt;code>a&lt;/code> and &lt;code>m&lt;/code>. If the element at &lt;code>m&lt;/code> is less than the element at &lt;code>a&lt;/code>, the function swaps them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> a=0 m=6 b=13
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â¼ â¼ â¼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>merge â -784â 38 â 74 â 238 â 959 â 9845â-5467â 0 â 0 â 42 â 905 â7586 â7586 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â² â²
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>initialize q p=2 m = p+q-m=5 q=(m+b)/2=9
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>binary search â¼ â¼ â¼
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rotate â -784â 38 â-5467â 0 â 0 â 74 â 238 â 959 â9845 â 42 â 905 â7586 â7586 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ´ââââââ´âââ¬âââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââ¬ââ´ââââââ´ââââââ´ââââââ´ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââââââââakready sortedâââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>merge â -784â 38 â-5467â 0 â 0 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ´ââââââ´ââââââ´ââââââ´ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ¬ââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>merge â 74 â 238 â 959 â9845 â 42 â 905 â7586 â7586 â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ´ââââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For subarrays with size greater than one, the function uses a binary search to find the index &lt;code>p&lt;/code> that divides the left subarray into two parts such that the maximum element in the left subarray is less than or equal to the minimum element in the right subarray. Similarly, it finds the index &lt;code>q&lt;/code> that divides the right subarray into two parts such that the maximum element in the left subarray is less than or equal to the minimum element in the right subarray.&lt;/p>
&lt;p>Once the indices &lt;code>p&lt;/code> and &lt;code>q&lt;/code> are known, the function rotates the slice so that the elements in the left subarray are in the correct order, followed by the elements in the right subarray. The function then recursively merges the left subarray and the right subarray.&lt;/p>
&lt;p>The &lt;code>rotate&lt;/code> function takes as input the &lt;code>Sortable&lt;/code> slice to be rotated, and three indices &lt;code>p&lt;/code>, &lt;code>m&lt;/code>, and &lt;code>q&lt;/code>. It first reverses the slice from &lt;code>p&lt;/code> to &lt;code>m&lt;/code>, then reverses the slice from &lt;code>m&lt;/code> to &lt;code>q&lt;/code>, and finally reverses the entire slice from &lt;code>p&lt;/code> to &lt;code>q-1&lt;/code>.&lt;/p>
&lt;p>The &lt;code>reverse&lt;/code> function takes as input the &lt;code>Sortable&lt;/code> slice to be reversed, and two indices &lt;code>a&lt;/code> and &lt;code>b&lt;/code>. It iterates over the slice from &lt;code>a&lt;/code> to &lt;code>b-1&lt;/code>, swapping each element with its corresponding element at the opposite end of the slice, until it reaches the midpoint of the slice.&lt;/p>
&lt;p>In summary, the in-place merge sort algorithm sorts a &lt;code>Sortable&lt;/code> slice in O(n log n) time and O(1) space(without taking stack in count), by repeatedly dividing the slice into two subarrays, sorting each subarray recursively, and merging the two sorted subarrays in place. The algorithm uses a binary search to find the index that divides each subarray into two parts, and a rotation operation to ensure that the elements in the left subarray are in the correct order, followed by the elements in the right subarray.&lt;/p></content></item><item><title>Understanding Pointers and the Unsafe Package in Go</title><link>https://www.michaelchan.space/posts/understanding-pointers-and-the-unsafe-package-in-go/</link><pubDate>Sat, 16 Feb 2019 15:17:28 +0800</pubDate><guid>https://www.michaelchan.space/posts/understanding-pointers-and-the-unsafe-package-in-go/</guid><description>&lt;p>Go is a popular programming language known for its simplicity, concurrency, and fast compile times. It features built-in support for pointers, which are variables that store the memory address of another variable. Pointers can be used to manipulate data more efficiently and can enable more advanced programming techniques, such as passing data by reference.&lt;/p>
&lt;p>In addition to its built-in support for pointers, Go also provides an &lt;code>unsafe&lt;/code> package that allows developers to bypass some of the safety checks that the language provides. This package can be used to perform low-level memory operations that are not possible using the safe language features.&lt;/p>
&lt;p>In this blog post, we&amp;rsquo;ll explore how pointers and the &lt;code>unsafe&lt;/code> package work in Go by examining a code snippet that uses both features.&lt;/p></description><content>&lt;p>Go is a popular programming language known for its simplicity, concurrency, and fast compile times. It features built-in support for pointers, which are variables that store the memory address of another variable. Pointers can be used to manipulate data more efficiently and can enable more advanced programming techniques, such as passing data by reference.&lt;/p>
&lt;p>In addition to its built-in support for pointers, Go also provides an &lt;code>unsafe&lt;/code> package that allows developers to bypass some of the safety checks that the language provides. This package can be used to perform low-level memory operations that are not possible using the safe language features.&lt;/p>
&lt;p>In this blog post, we&amp;rsquo;ll explore how pointers and the &lt;code>unsafe&lt;/code> package work in Go by examining a code snippet that uses both features.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;e&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;o&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">bs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">n&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> uintptr(&lt;span style="color:#ae81ff">8&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">lp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(uintptr(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(uintptr(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">n&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the length of slice is %d\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">lp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the capacity of slice is %d\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">firstp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the first byte of slice is %c\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">firstp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s break down what this code does, line by line:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">byte&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This line creates a byte slice with length 0 and capacity 10. The &lt;code>make&lt;/code> function is used to allocate memory for the slice, and the slice is assigned to the &lt;code>bs&lt;/code> variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;e&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;l&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">bs&lt;/span> = append(&lt;span style="color:#a6e22e">bs&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;o&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These lines append the bytes &amp;lsquo;h&amp;rsquo;, &amp;rsquo;e&amp;rsquo;, &amp;rsquo;l&amp;rsquo;, &amp;rsquo;l&amp;rsquo;, and &amp;lsquo;o&amp;rsquo; to the &lt;code>bs&lt;/code> slice, using the &lt;code>append&lt;/code> function. The result is a slice with length 5 and capacity 10.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">bs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>p := &amp;amp;bs&lt;/code> creates a pointer &lt;code>p&lt;/code> that points to the memory address of the &lt;code>bs&lt;/code> slice, then &lt;code>n := uintptr(8)&lt;/code> creates a &lt;code>uintptr&lt;/code> variable &lt;code>n&lt;/code> with a value of 8.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(uintptr(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">n&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">cp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(uintptr(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">n&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These lines create two pointers, &lt;code>lp&lt;/code> and &lt;code>cp&lt;/code>, that point to the memory addresses of the slice length and capacity values, respectively. This is done using the &lt;code>unsafe.Pointer&lt;/code> function to convert the &lt;code>p&lt;/code> pointer to a &lt;code>uintptr&lt;/code> value, adding an offset to the pointer using the &lt;code>+&lt;/code> operator, and then converting the result back to a pointer of type &lt;code>*int&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span> p p+8 p+16
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââââââââ¬ââââââââââ¬ââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â(uintptr â (int) â (int) â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SliceHeaderâ Data â Len â Cap â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââ¬ââââââââ´ââââââââââ´ââââââââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> â âââââ¬ââââ¬ââââ¬ââââ¬ââââ¬ââââ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââº h â e â l â l â o â...â
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> âââââ´ââââ´ââââ´ââââ´ââââ´ââââ
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first &lt;code>unsafe.Pointer&lt;/code> call converts the &lt;code>p&lt;/code> pointer to a &lt;code>uintptr&lt;/code> value, and the second &lt;code>unsafe.Pointer&lt;/code> call converts it back to a pointer of type &lt;code>unsafe.Pointer&lt;/code>. This is necessary because the &lt;code>uintptr&lt;/code> value cannot be directly converted to a pointer of type &lt;code>*int&lt;/code>.&lt;/p>
&lt;p>The first pointer, &lt;code>lp&lt;/code>, has an offset of 8 from the start of the &lt;code>bs&lt;/code> slice, which points to the length value held by &lt;code>sliceHeader&lt;/code>. The second pointer, &lt;code>cp&lt;/code>, has an offset of 16, which points to the capacity value held by &lt;code>sliceHeader&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the length of slice is %d\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">lp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the capacity of slice is %d\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">cp&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>These lines print the length and capacity values of the &lt;code>bs&lt;/code> slice, which are accessed through the &lt;code>lp&lt;/code> and &lt;code>cp&lt;/code> pointers.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">firstp&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">byte&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#66d9ef">uintptr&lt;/span>)(&lt;span style="color:#a6e22e">unsafe&lt;/span>.&lt;span style="color:#a6e22e">Pointer&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the first byte of slice is %c\n&amp;#34;&lt;/span>, &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">firstp&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This line creates a pointer &lt;code>firstp&lt;/code> that points to the first byte of the &lt;code>bs&lt;/code> slice. This is done by first converting the &lt;code>p&lt;/code> pointer to a &lt;code>uintptr&lt;/code> value(which is the address of &lt;code>data&lt;/code> held by &lt;code>sliceHeader&lt;/code>), then dereferencing it to access the address, and finally converting the result to a &lt;code>uintptr&lt;/code> value and dereferencing it again to access the first byte of the slice.&lt;/p>
&lt;p>The first byte is printed using the &lt;code>%c&lt;/code> format specifier, which formats the value as a character.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>In summary, the code we examined demonstrates how to use pointers and the &lt;code>unsafe&lt;/code> package in Go to perform low-level memory operations. While the &lt;code>unsafe&lt;/code> package can be useful in certain situations, it should be used with caution, as it bypasses some of the safety checks that Go provides. When working with pointers and the &lt;code>unsafe&lt;/code> package, it is important to understand how memory is allocated and managed in Go, and to follow best practices for memory management and data manipulation.&lt;/p></content></item><item><title>About</title><link>https://www.michaelchan.space/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.michaelchan.space/about/</guid><description>Hello there, I&amp;rsquo;m Michael, a backend developer with a passion for blockchain technology. I enjoy diving into the intricacies of blockchain and exploring its potential for various applications.
In my free time, you can usually find me nose-deep in a good book or catching up on my favorite animes. I find inspiration in stories that challenge my perceptions and broaden my horizons, whether they&amp;rsquo;re in the form of a classic novel or an animated series.</description><content>&lt;p>Hello there, I&amp;rsquo;m Michael, a backend developer with a passion for blockchain technology. I enjoy diving into the intricacies of blockchain and exploring its potential for various applications.&lt;/p>
&lt;p>In my free time, you can usually find me nose-deep in a good book or catching up on my favorite animes. I find inspiration in stories that challenge my perceptions and broaden my horizons, whether they&amp;rsquo;re in the form of a classic novel or an animated series.&lt;/p>
&lt;p>As a developer, I&amp;rsquo;m constantly seeking out new challenges and opportunities to learn and grow. I enjoy working with a wide range of technologies and collaborating with others to create innovative solutions.&lt;/p>
&lt;p>On this blog, I&amp;rsquo;ll be sharing my thoughts and insights on all things blockchain, as well as offering tips and tutorials on development best practices. I hope you&amp;rsquo;ll find it useful and informative, and I look forward to connecting with others who share my interests!&lt;/p></content></item></channel></rss>